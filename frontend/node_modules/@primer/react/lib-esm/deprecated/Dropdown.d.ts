import React from 'react';
import { ButtonProps } from './Button';
import { DetailsProps } from '../Details';
import { SxProp } from '../sx';
import { ComponentProps } from '../utils/types';
export type DropdownProps = DetailsProps;
export type DropdownButtonProps = ButtonProps;
declare const DropdownCaret: import("styled-components").StyledComponent<"div", any, SxProp, never>;
declare const DropdownMenu: import("styled-components").StyledComponent<"ul", any, {
    direction?: "s" | "ne" | "e" | "se" | "sw" | "w" | undefined;
} & SxProp, never>;
declare const DropdownItem: import("styled-components").StyledComponent<"li", any, SxProp, never>;
export type DropdownCaretProps = ComponentProps<typeof DropdownCaret>;
export type DropdownMenuProps = ComponentProps<typeof DropdownMenu>;
export type DropdownItemProps = ComponentProps<typeof DropdownItem>;
/**
 * @deprecated Use ActionMenu instead. See https://primer.style/react/ActionMenu for more details.
 */
declare const _default: {
    ({ children, className, ...rest }: {
        open?: boolean | undefined;
        color?: string | undefined;
        property?: string | undefined;
        translate?: "yes" | "no" | undefined;
        hidden?: boolean | undefined;
        children?: React.ReactNode;
        ref?: ((instance: HTMLDetailsElement | null) => void) | React.RefObject<HTMLDetailsElement> | null | undefined;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        id?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLDetailsElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLDetailsElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLDetailsElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLDetailsElement> | undefined;
        onChange?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onInput?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onReset?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onError?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onResize?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onResizeCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLDetailsElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLDetailsElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLDetailsElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLDetailsElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLDetailsElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLDetailsElement> | undefined;
        sx?: import("../sx").BetterSystemStyleObject | undefined;
        onToggle?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
    } & {
        theme?: any;
    }): JSX.Element;
    defaultProps: Partial<{
        open?: boolean | undefined;
        color?: string | undefined;
        property?: string | undefined;
        translate?: "yes" | "no" | undefined;
        hidden?: boolean | undefined;
        children?: React.ReactNode;
        ref?: ((instance: HTMLDetailsElement | null) => void) | React.RefObject<HTMLDetailsElement> | null | undefined;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        id?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        lang?: string | undefined;
        nonce?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: (boolean | "true" | "false") | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-busy'?: (boolean | "true" | "false") | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: (boolean | "true" | "false") | undefined;
        'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: (boolean | "true" | "false") | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: (boolean | "true" | "false") | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
        'aria-hidden'?: (boolean | "true" | "false") | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: (boolean | "true" | "false") | undefined;
        'aria-multiline'?: (boolean | "true" | "false") | undefined;
        'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: (boolean | "true" | "false") | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: (boolean | "true" | "false") | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: (boolean | "true" | "false") | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLDetailsElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDetailsElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLDetailsElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLDetailsElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLDetailsElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLDetailsElement> | undefined;
        onChange?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onInput?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onReset?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLDetailsElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onError?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLDetailsElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onResize?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onResizeCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLDetailsElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLDetailsElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLDetailsElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDetailsElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLDetailsElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLDetailsElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLDetailsElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLDetailsElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDetailsElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLDetailsElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLDetailsElement> | undefined;
        sx?: import("../sx").BetterSystemStyleObject | undefined;
        onToggle?: React.ReactEventHandler<HTMLDetailsElement> | undefined;
    } & {
        theme?: any;
    }> | undefined;
} & {
    Caret: import("styled-components").StyledComponent<"div", any, SxProp, never>;
    Menu: import("styled-components").StyledComponent<"ul", any, {
        direction?: "s" | "ne" | "e" | "se" | "sw" | "w" | undefined;
    } & SxProp, never>;
    Item: import("styled-components").StyledComponent<"li", any, SxProp, never>;
    Button: {
        ({ children, ...rest }: {
            color?: string | undefined;
            property?: string | undefined;
            translate?: "yes" | "no" | undefined;
            hidden?: boolean | undefined;
            children?: React.ReactNode;
            value?: string | number | readonly string[] | undefined;
            ref?: ((instance: HTMLButtonElement | null) => void) | React.RefObject<HTMLButtonElement> | null | undefined;
            form?: string | undefined;
            slot?: string | undefined;
            style?: React.CSSProperties | undefined;
            title?: string | undefined;
            type?: "button" | "reset" | "submit" | undefined;
            id?: string | undefined;
            dangerouslySetInnerHTML?: {
                __html: string;
            } | undefined;
            name?: string | undefined;
            key?: React.Key | null | undefined;
            defaultChecked?: boolean | undefined;
            defaultValue?: string | number | readonly string[] | undefined;
            suppressContentEditableWarning?: boolean | undefined;
            suppressHydrationWarning?: boolean | undefined;
            accessKey?: string | undefined;
            className?: string | undefined;
            contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
            contextMenu?: string | undefined;
            dir?: string | undefined;
            draggable?: (boolean | "true" | "false") | undefined;
            lang?: string | undefined;
            nonce?: string | undefined;
            placeholder?: string | undefined;
            spellCheck?: (boolean | "true" | "false") | undefined;
            tabIndex?: number | undefined;
            radioGroup?: string | undefined;
            role?: React.AriaRole | undefined;
            about?: string | undefined;
            datatype?: string | undefined;
            inlist?: any;
            prefix?: string | undefined;
            resource?: string | undefined;
            typeof?: string | undefined;
            vocab?: string | undefined;
            autoCapitalize?: string | undefined;
            autoCorrect?: string | undefined;
            autoSave?: string | undefined;
            itemProp?: string | undefined;
            itemScope?: boolean | undefined;
            itemType?: string | undefined;
            itemID?: string | undefined;
            itemRef?: string | undefined;
            results?: number | undefined;
            security?: string | undefined;
            unselectable?: "on" | "off" | undefined;
            inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
            is?: string | undefined;
            'aria-activedescendant'?: string | undefined;
            'aria-atomic'?: (boolean | "true" | "false") | undefined;
            'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
            'aria-busy'?: (boolean | "true" | "false") | undefined;
            'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-colcount'?: number | undefined;
            'aria-colindex'?: number | undefined;
            'aria-colspan'?: number | undefined;
            'aria-controls'?: string | undefined;
            'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
            'aria-describedby'?: string | undefined;
            'aria-details'?: string | undefined;
            'aria-disabled'?: (boolean | "true" | "false") | undefined;
            'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
            'aria-errormessage'?: string | undefined;
            'aria-expanded'?: (boolean | "true" | "false") | undefined;
            'aria-flowto'?: string | undefined;
            'aria-grabbed'?: (boolean | "true" | "false") | undefined;
            'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
            'aria-hidden'?: (boolean | "true" | "false") | undefined;
            'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
            'aria-keyshortcuts'?: string | undefined;
            'aria-label'?: string | undefined;
            'aria-labelledby'?: string | undefined;
            'aria-level'?: number | undefined;
            'aria-live'?: "off" | "assertive" | "polite" | undefined;
            'aria-modal'?: (boolean | "true" | "false") | undefined;
            'aria-multiline'?: (boolean | "true" | "false") | undefined;
            'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
            'aria-orientation'?: "horizontal" | "vertical" | undefined;
            'aria-owns'?: string | undefined;
            'aria-placeholder'?: string | undefined;
            'aria-posinset'?: number | undefined;
            'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-readonly'?: (boolean | "true" | "false") | undefined;
            'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
            'aria-required'?: (boolean | "true" | "false") | undefined;
            'aria-roledescription'?: string | undefined;
            'aria-rowcount'?: number | undefined;
            'aria-rowindex'?: number | undefined;
            'aria-rowspan'?: number | undefined;
            'aria-selected'?: (boolean | "true" | "false") | undefined;
            'aria-setsize'?: number | undefined;
            'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
            'aria-valuemax'?: number | undefined;
            'aria-valuemin'?: number | undefined;
            'aria-valuenow'?: number | undefined;
            'aria-valuetext'?: string | undefined;
            onCopy?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onCopyCapture?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onCut?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onCutCapture?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onPaste?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onPasteCapture?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onCompositionEnd?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onCompositionEndCapture?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onCompositionStart?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onCompositionStartCapture?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onCompositionUpdate?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onFocus?: React.FocusEventHandler<HTMLButtonElement> | undefined;
            onFocusCapture?: React.FocusEventHandler<HTMLButtonElement> | undefined;
            onBlur?: React.FocusEventHandler<HTMLButtonElement> | undefined;
            onBlurCapture?: React.FocusEventHandler<HTMLButtonElement> | undefined;
            onChange?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onChangeCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onBeforeInput?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onBeforeInputCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onInput?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onInputCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onReset?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onResetCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onSubmit?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onSubmitCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onInvalid?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onInvalidCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onLoad?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onError?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onErrorCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onKeyDown?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onKeyDownCapture?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onKeyPress?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onKeyPressCapture?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onKeyUp?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onKeyUpCapture?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onAbort?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onAbortCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onCanPlay?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onCanPlayCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onCanPlayThrough?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onCanPlayThroughCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onDurationChange?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onDurationChangeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEmptied?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEmptiedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEncrypted?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEncryptedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEnded?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEndedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadedData?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadedDataCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadedMetadata?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadedMetadataCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadStart?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadStartCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPause?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPauseCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPlay?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPlayCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPlaying?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPlayingCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onProgress?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onProgressCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onRateChange?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onRateChangeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onResize?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onResizeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSeeked?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSeekedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSeeking?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSeekingCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onStalled?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onStalledCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSuspend?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSuspendCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onTimeUpdate?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onTimeUpdateCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onVolumeChange?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onVolumeChangeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onWaiting?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onWaitingCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onAuxClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onAuxClickCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onClickCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onContextMenu?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onContextMenuCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onDoubleClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onDoubleClickCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onDrag?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragEnd?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragEndCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragEnter?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragEnterCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragExit?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragExitCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragLeave?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragLeaveCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragOver?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragOverCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragStart?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragStartCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDrop?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDropCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onMouseDown?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseDownCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseEnter?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseLeave?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseMove?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseMoveCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseOut?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseOutCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseOver?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseOverCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseUp?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseUpCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onSelect?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSelectCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onTouchCancel?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchCancelCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchEnd?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchEndCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchMove?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchMoveCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchStart?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchStartCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onPointerDown?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerDownCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerMove?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerMoveCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerUp?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerUpCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerCancel?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerCancelCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerEnter?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerEnterCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerLeave?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerLeaveCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerOver?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerOverCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerOut?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerOutCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onGotPointerCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onLostPointerCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onScroll?: React.UIEventHandler<HTMLButtonElement> | undefined;
            onScrollCapture?: React.UIEventHandler<HTMLButtonElement> | undefined;
            onWheel?: React.WheelEventHandler<HTMLButtonElement> | undefined;
            onWheelCapture?: React.WheelEventHandler<HTMLButtonElement> | undefined;
            onAnimationStart?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onAnimationStartCapture?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onAnimationEnd?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onAnimationEndCapture?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onAnimationIteration?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onAnimationIterationCapture?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onTransitionEnd?: React.TransitionEventHandler<HTMLButtonElement> | undefined;
            onTransitionEndCapture?: React.TransitionEventHandler<HTMLButtonElement> | undefined;
            as?: string | React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            sx?: import("../sx").BetterSystemStyleObject | undefined;
            autoFocus?: boolean | undefined;
            disabled?: boolean | undefined;
            formAction?: string | undefined;
            formEncType?: string | undefined;
            formMethod?: string | undefined;
            formNoValidate?: boolean | undefined;
            formTarget?: string | undefined;
            variant?: "small" | "medium" | "large" | undefined;
        } & {
            theme?: any;
        }): JSX.Element;
        defaultProps: Partial<{
            color?: string | undefined;
            property?: string | undefined;
            translate?: "yes" | "no" | undefined;
            hidden?: boolean | undefined;
            children?: React.ReactNode;
            value?: string | number | readonly string[] | undefined;
            ref?: ((instance: HTMLButtonElement | null) => void) | React.RefObject<HTMLButtonElement> | null | undefined;
            form?: string | undefined;
            slot?: string | undefined;
            style?: React.CSSProperties | undefined;
            title?: string | undefined;
            type?: "button" | "reset" | "submit" | undefined;
            id?: string | undefined;
            dangerouslySetInnerHTML?: {
                __html: string;
            } | undefined;
            name?: string | undefined;
            key?: React.Key | null | undefined;
            defaultChecked?: boolean | undefined;
            defaultValue?: string | number | readonly string[] | undefined;
            suppressContentEditableWarning?: boolean | undefined;
            suppressHydrationWarning?: boolean | undefined;
            accessKey?: string | undefined;
            className?: string | undefined;
            contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
            contextMenu?: string | undefined;
            dir?: string | undefined;
            draggable?: (boolean | "true" | "false") | undefined;
            lang?: string | undefined;
            nonce?: string | undefined;
            placeholder?: string | undefined;
            spellCheck?: (boolean | "true" | "false") | undefined;
            tabIndex?: number | undefined;
            radioGroup?: string | undefined;
            role?: React.AriaRole | undefined;
            about?: string | undefined;
            datatype?: string | undefined;
            inlist?: any;
            prefix?: string | undefined;
            resource?: string | undefined;
            typeof?: string | undefined;
            vocab?: string | undefined;
            autoCapitalize?: string | undefined;
            autoCorrect?: string | undefined;
            autoSave?: string | undefined;
            itemProp?: string | undefined;
            itemScope?: boolean | undefined;
            itemType?: string | undefined;
            itemID?: string | undefined;
            itemRef?: string | undefined;
            results?: number | undefined;
            security?: string | undefined;
            unselectable?: "on" | "off" | undefined;
            inputMode?: "search" | "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
            is?: string | undefined;
            'aria-activedescendant'?: string | undefined;
            'aria-atomic'?: (boolean | "true" | "false") | undefined;
            'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
            'aria-busy'?: (boolean | "true" | "false") | undefined;
            'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-colcount'?: number | undefined;
            'aria-colindex'?: number | undefined;
            'aria-colspan'?: number | undefined;
            'aria-controls'?: string | undefined;
            'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
            'aria-describedby'?: string | undefined;
            'aria-details'?: string | undefined;
            'aria-disabled'?: (boolean | "true" | "false") | undefined;
            'aria-dropeffect'?: "link" | "none" | "copy" | "execute" | "move" | "popup" | undefined;
            'aria-errormessage'?: string | undefined;
            'aria-expanded'?: (boolean | "true" | "false") | undefined;
            'aria-flowto'?: string | undefined;
            'aria-grabbed'?: (boolean | "true" | "false") | undefined;
            'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
            'aria-hidden'?: (boolean | "true" | "false") | undefined;
            'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
            'aria-keyshortcuts'?: string | undefined;
            'aria-label'?: string | undefined;
            'aria-labelledby'?: string | undefined;
            'aria-level'?: number | undefined;
            'aria-live'?: "off" | "assertive" | "polite" | undefined;
            'aria-modal'?: (boolean | "true" | "false") | undefined;
            'aria-multiline'?: (boolean | "true" | "false") | undefined;
            'aria-multiselectable'?: (boolean | "true" | "false") | undefined;
            'aria-orientation'?: "horizontal" | "vertical" | undefined;
            'aria-owns'?: string | undefined;
            'aria-placeholder'?: string | undefined;
            'aria-posinset'?: number | undefined;
            'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-readonly'?: (boolean | "true" | "false") | undefined;
            'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
            'aria-required'?: (boolean | "true" | "false") | undefined;
            'aria-roledescription'?: string | undefined;
            'aria-rowcount'?: number | undefined;
            'aria-rowindex'?: number | undefined;
            'aria-rowspan'?: number | undefined;
            'aria-selected'?: (boolean | "true" | "false") | undefined;
            'aria-setsize'?: number | undefined;
            'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
            'aria-valuemax'?: number | undefined;
            'aria-valuemin'?: number | undefined;
            'aria-valuenow'?: number | undefined;
            'aria-valuetext'?: string | undefined;
            onCopy?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onCopyCapture?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onCut?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onCutCapture?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onPaste?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onPasteCapture?: React.ClipboardEventHandler<HTMLButtonElement> | undefined;
            onCompositionEnd?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onCompositionEndCapture?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onCompositionStart?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onCompositionStartCapture?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onCompositionUpdate?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLButtonElement> | undefined;
            onFocus?: React.FocusEventHandler<HTMLButtonElement> | undefined;
            onFocusCapture?: React.FocusEventHandler<HTMLButtonElement> | undefined;
            onBlur?: React.FocusEventHandler<HTMLButtonElement> | undefined;
            onBlurCapture?: React.FocusEventHandler<HTMLButtonElement> | undefined;
            onChange?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onChangeCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onBeforeInput?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onBeforeInputCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onInput?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onInputCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onReset?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onResetCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onSubmit?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onSubmitCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onInvalid?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onInvalidCapture?: React.FormEventHandler<HTMLButtonElement> | undefined;
            onLoad?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onError?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onErrorCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onKeyDown?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onKeyDownCapture?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onKeyPress?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onKeyPressCapture?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onKeyUp?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onKeyUpCapture?: React.KeyboardEventHandler<HTMLButtonElement> | undefined;
            onAbort?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onAbortCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onCanPlay?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onCanPlayCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onCanPlayThrough?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onCanPlayThroughCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onDurationChange?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onDurationChangeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEmptied?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEmptiedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEncrypted?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEncryptedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEnded?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onEndedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadedData?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadedDataCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadedMetadata?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadedMetadataCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadStart?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onLoadStartCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPause?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPauseCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPlay?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPlayCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPlaying?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onPlayingCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onProgress?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onProgressCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onRateChange?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onRateChangeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onResize?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onResizeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSeeked?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSeekedCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSeeking?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSeekingCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onStalled?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onStalledCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSuspend?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSuspendCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onTimeUpdate?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onTimeUpdateCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onVolumeChange?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onVolumeChangeCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onWaiting?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onWaitingCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onAuxClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onAuxClickCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onClickCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onContextMenu?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onContextMenuCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onDoubleClick?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onDoubleClickCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onDrag?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragEnd?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragEndCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragEnter?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragEnterCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragExit?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragExitCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragLeave?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragLeaveCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragOver?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragOverCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragStart?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDragStartCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDrop?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onDropCapture?: React.DragEventHandler<HTMLButtonElement> | undefined;
            onMouseDown?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseDownCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseEnter?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseLeave?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseMove?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseMoveCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseOut?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseOutCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseOver?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseOverCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseUp?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onMouseUpCapture?: React.MouseEventHandler<HTMLButtonElement> | undefined;
            onSelect?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onSelectCapture?: React.ReactEventHandler<HTMLButtonElement> | undefined;
            onTouchCancel?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchCancelCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchEnd?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchEndCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchMove?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchMoveCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchStart?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onTouchStartCapture?: React.TouchEventHandler<HTMLButtonElement> | undefined;
            onPointerDown?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerDownCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerMove?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerMoveCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerUp?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerUpCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerCancel?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerCancelCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerEnter?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerEnterCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerLeave?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerLeaveCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerOver?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerOverCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerOut?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onPointerOutCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onGotPointerCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onLostPointerCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLButtonElement> | undefined;
            onScroll?: React.UIEventHandler<HTMLButtonElement> | undefined;
            onScrollCapture?: React.UIEventHandler<HTMLButtonElement> | undefined;
            onWheel?: React.WheelEventHandler<HTMLButtonElement> | undefined;
            onWheelCapture?: React.WheelEventHandler<HTMLButtonElement> | undefined;
            onAnimationStart?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onAnimationStartCapture?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onAnimationEnd?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onAnimationEndCapture?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onAnimationIteration?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onAnimationIterationCapture?: React.AnimationEventHandler<HTMLButtonElement> | undefined;
            onTransitionEnd?: React.TransitionEventHandler<HTMLButtonElement> | undefined;
            onTransitionEndCapture?: React.TransitionEventHandler<HTMLButtonElement> | undefined;
            as?: string | React.ComponentClass<any, any> | React.FunctionComponent<any> | undefined;
            sx?: import("../sx").BetterSystemStyleObject | undefined;
            autoFocus?: boolean | undefined;
            disabled?: boolean | undefined;
            formAction?: string | undefined;
            formEncType?: string | undefined;
            formMethod?: string | undefined;
            formNoValidate?: boolean | undefined;
            formTarget?: string | undefined;
            variant?: "small" | "medium" | "large" | undefined;
        } & {
            theme?: any;
        }> | undefined;
        displayName: string;
    };
};
export default _default;
