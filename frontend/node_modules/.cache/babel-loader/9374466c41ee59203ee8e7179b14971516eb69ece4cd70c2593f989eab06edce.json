{"ast":null,"code":"import { useCallback, useMemo, useEffect } from 'react';\n\n/**\n * Calls all handlers in reverse order\n * @param event The KeyboardEvent generated by the Escape keydown.\n */\nfunction handleEscape(event) {\n  if (!event.defaultPrevented) {\n    for (const handler of Object.values(registry).reverse()) {\n      handler(event);\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (event.defaultPrevented) break;\n    }\n  }\n}\nconst registry = {};\nfunction register(id, handler) {\n  registry[id] = handler;\n}\nfunction deregister(id) {\n  delete registry[id];\n}\n\n// For auto-incrementing unique identifiers for registered handlers.\nlet handlerId = 0;\n\n/**\n * Sets up a `keydown` listener on `window.document`. If\n * 1) The pressed key is \"Escape\", and\n * 2) The event has not had `.preventDefault()` called\n * The given callback will be executed.\n *\n * Note: If multiple `useOnEscapePress` hooks are active simultaneously, the\n * callbacks will occur in reverse order. In other words, if a parent component\n * and a child component both call `useOnEscapePress`, when the user presses\n * Escape, the child component's callback will execute, followed by the parent's\n * callback. Each callback has the chance to call `.preventDefault()` on the\n * event to prevent further callbacks.\n *\n * @param callback {(e: KeyboardEvent) => void} The callback that gets executed\n * when the Escape key is pressed. The KeyboardEvent generated by the Escape\n * keypress is passed as the only argument.\n *\n * @param callbackDependencies {React.DependencyList} The dependencies of the given\n * `onEscape` callback for memoization. Omit this param if the callback is already\n * memoized. See `React.useCallback` for more info on memoization.\n */\nconst useOnEscapePress = function (onEscape) {\n  let callbackDependencies = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [onEscape];\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const escapeCallback = useCallback(onEscape, callbackDependencies);\n  const handler = useCallback(event => {\n    if (event.key === 'Escape') escapeCallback(event);\n  }, [escapeCallback]);\n  const id = useMemo(() => handlerId++, []);\n  useEffect(() => {\n    if (Object.keys(registry).length === 0) {\n      document.addEventListener('keydown', handleEscape);\n    }\n    register(id, handler);\n    return () => {\n      deregister(id);\n      if (Object.keys(registry).length === 0) {\n        document.removeEventListener('keydown', handleEscape);\n      }\n    };\n  }, [id, handler]);\n};\nexport { useOnEscapePress };","map":{"version":3,"names":["useCallback","useMemo","useEffect","handleEscape","event","defaultPrevented","handler","Object","values","registry","reverse","register","id","deregister","handlerId","useOnEscapePress","onEscape","callbackDependencies","arguments","length","undefined","escapeCallback","key","keys","document","addEventListener","removeEventListener"],"sources":["/home/muneeb/assignment-krayo/frontend/node_modules/@primer/react/lib-esm/hooks/useOnEscapePress.js"],"sourcesContent":["import { useCallback, useMemo, useEffect } from 'react';\n\n/**\n * Calls all handlers in reverse order\n * @param event The KeyboardEvent generated by the Escape keydown.\n */\nfunction handleEscape(event) {\n  if (!event.defaultPrevented) {\n    for (const handler of Object.values(registry).reverse()) {\n      handler(event);\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (event.defaultPrevented) break;\n    }\n  }\n}\nconst registry = {};\nfunction register(id, handler) {\n  registry[id] = handler;\n}\nfunction deregister(id) {\n  delete registry[id];\n}\n\n// For auto-incrementing unique identifiers for registered handlers.\nlet handlerId = 0;\n\n/**\n * Sets up a `keydown` listener on `window.document`. If\n * 1) The pressed key is \"Escape\", and\n * 2) The event has not had `.preventDefault()` called\n * The given callback will be executed.\n *\n * Note: If multiple `useOnEscapePress` hooks are active simultaneously, the\n * callbacks will occur in reverse order. In other words, if a parent component\n * and a child component both call `useOnEscapePress`, when the user presses\n * Escape, the child component's callback will execute, followed by the parent's\n * callback. Each callback has the chance to call `.preventDefault()` on the\n * event to prevent further callbacks.\n *\n * @param callback {(e: KeyboardEvent) => void} The callback that gets executed\n * when the Escape key is pressed. The KeyboardEvent generated by the Escape\n * keypress is passed as the only argument.\n *\n * @param callbackDependencies {React.DependencyList} The dependencies of the given\n * `onEscape` callback for memoization. Omit this param if the callback is already\n * memoized. See `React.useCallback` for more info on memoization.\n */\nconst useOnEscapePress = (onEscape, callbackDependencies = [onEscape]) => {\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const escapeCallback = useCallback(onEscape, callbackDependencies);\n  const handler = useCallback(event => {\n    if (event.key === 'Escape') escapeCallback(event);\n  }, [escapeCallback]);\n  const id = useMemo(() => handlerId++, []);\n  useEffect(() => {\n    if (Object.keys(registry).length === 0) {\n      document.addEventListener('keydown', handleEscape);\n    }\n    register(id, handler);\n    return () => {\n      deregister(id);\n      if (Object.keys(registry).length === 0) {\n        document.removeEventListener('keydown', handleEscape);\n      }\n    };\n  }, [id, handler]);\n};\n\nexport { useOnEscapePress };\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;;AAEvD;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAACC,KAAK,EAAE;EAC3B,IAAI,CAACA,KAAK,CAACC,gBAAgB,EAAE;IAC3B,KAAK,MAAMC,OAAO,IAAIC,MAAM,CAACC,MAAM,CAACC,QAAQ,CAAC,CAACC,OAAO,EAAE,EAAE;MACvDJ,OAAO,CAACF,KAAK,CAAC;MACd;MACA,IAAIA,KAAK,CAACC,gBAAgB,EAAE;IAC9B;EACF;AACF;AACA,MAAMI,QAAQ,GAAG,CAAC,CAAC;AACnB,SAASE,QAAQA,CAACC,EAAE,EAAEN,OAAO,EAAE;EAC7BG,QAAQ,CAACG,EAAE,CAAC,GAAGN,OAAO;AACxB;AACA,SAASO,UAAUA,CAACD,EAAE,EAAE;EACtB,OAAOH,QAAQ,CAACG,EAAE,CAAC;AACrB;;AAEA;AACA,IAAIE,SAAS,GAAG,CAAC;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,SAAAA,CAACC,QAAQ,EAAwC;EAAA,IAAtCC,oBAAoB,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAACF,QAAQ,CAAC;EACnE;EACA,MAAMK,cAAc,GAAGrB,WAAW,CAACgB,QAAQ,EAAEC,oBAAoB,CAAC;EAClE,MAAMX,OAAO,GAAGN,WAAW,CAACI,KAAK,IAAI;IACnC,IAAIA,KAAK,CAACkB,GAAG,KAAK,QAAQ,EAAED,cAAc,CAACjB,KAAK,CAAC;EACnD,CAAC,EAAE,CAACiB,cAAc,CAAC,CAAC;EACpB,MAAMT,EAAE,GAAGX,OAAO,CAAC,MAAMa,SAAS,EAAE,EAAE,EAAE,CAAC;EACzCZ,SAAS,CAAC,MAAM;IACd,IAAIK,MAAM,CAACgB,IAAI,CAACd,QAAQ,CAAC,CAACU,MAAM,KAAK,CAAC,EAAE;MACtCK,QAAQ,CAACC,gBAAgB,CAAC,SAAS,EAAEtB,YAAY,CAAC;IACpD;IACAQ,QAAQ,CAACC,EAAE,EAAEN,OAAO,CAAC;IACrB,OAAO,MAAM;MACXO,UAAU,CAACD,EAAE,CAAC;MACd,IAAIL,MAAM,CAACgB,IAAI,CAACd,QAAQ,CAAC,CAACU,MAAM,KAAK,CAAC,EAAE;QACtCK,QAAQ,CAACE,mBAAmB,CAAC,SAAS,EAAEvB,YAAY,CAAC;MACvD;IACF,CAAC;EACH,CAAC,EAAE,CAACS,EAAE,EAAEN,OAAO,CAAC,CAAC;AACnB,CAAC;AAED,SAASS,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}