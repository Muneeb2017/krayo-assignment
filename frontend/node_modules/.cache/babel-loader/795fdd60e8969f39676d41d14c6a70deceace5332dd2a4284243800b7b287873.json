{"ast":null,"code":"import React__default from 'react';\nimport useSafeTimeout from '../hooks/useSafeTimeout.js';\nimport { getAccessibleName } from './shared.js';\nfunction useTypeahead(_ref) {\n  let {\n    containerRef,\n    onFocusChange\n  } = _ref;\n  const searchValue = React__default.useRef('');\n  const timeoutRef = React__default.useRef(0);\n  const onFocusChangeRef = React__default.useRef(onFocusChange);\n  const {\n    safeSetTimeout,\n    safeClearTimeout\n  } = useSafeTimeout();\n\n  // Update the ref when the callback changes\n  React__default.useEffect(() => {\n    onFocusChangeRef.current = onFocusChange;\n  }, [onFocusChange]);\n\n  // Focus the closest element that matches the search value\n  const focusSearchValue = React__default.useCallback(searchValue => {\n    // Don't change focus if the search value is empty\n    if (!searchValue) return;\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n\n    // Get focusable elements\n    const elements = Array.from(container.querySelectorAll('[role=\"treeitem\"]'));\n\n    // Get the index of active element\n    const activeIndex = elements.findIndex(element => element === document.activeElement);\n\n    // Wrap the array elements such that the active descendant is at the beginning\n    let sortedElements = wrapArray(elements, activeIndex);\n\n    // Remove the active descendant from the beginning of the array\n    // when the user initiates a new search\n    if (searchValue.length === 1) {\n      sortedElements = sortedElements.slice(1);\n    }\n\n    // Find the first element that matches the search value\n    const nextElement = sortedElements.find(element => {\n      const name = getAccessibleName(element).toLowerCase();\n      return name.startsWith(searchValue.toLowerCase());\n    });\n\n    // If a match is found, focus it\n    if (nextElement) {\n      onFocusChangeRef.current(nextElement);\n    }\n  }, [containerRef]);\n\n  // Update the search value when the user types\n  React__default.useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    function onKeyDown(event) {\n      // Ignore key presses that don't produce a character value\n      if (!event.key || event.key.length > 1) return;\n\n      // Ignore key presses that occur with a modifier\n      if (event.ctrlKey || event.altKey || event.metaKey) return;\n\n      // Update the existing search value with the new key press\n      searchValue.current += event.key;\n      focusSearchValue(searchValue.current);\n\n      // Reset the timeout\n      safeClearTimeout(timeoutRef.current);\n      timeoutRef.current = safeSetTimeout(() => searchValue.current = '', 300);\n\n      // Prevent default behavior\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    container.addEventListener('keydown', onKeyDown);\n    return () => container.removeEventListener('keydown', onKeyDown);\n  }, [containerRef, focusSearchValue, safeClearTimeout, safeSetTimeout]);\n}\n\n/**\n * Wraps an array around itself at a given start index\n *\n * @example\n * wrapArray(['a', 'b', 'c', 'd'], 2) // ['c', 'd', 'a', 'b']\n */\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\nexport { useTypeahead };","map":{"version":3,"names":["React__default","useSafeTimeout","getAccessibleName","useTypeahead","_ref","containerRef","onFocusChange","searchValue","useRef","timeoutRef","onFocusChangeRef","safeSetTimeout","safeClearTimeout","useEffect","current","focusSearchValue","useCallback","container","elements","Array","from","querySelectorAll","activeIndex","findIndex","element","document","activeElement","sortedElements","wrapArray","length","slice","nextElement","find","name","toLowerCase","startsWith","onKeyDown","event","key","ctrlKey","altKey","metaKey","preventDefault","stopPropagation","addEventListener","removeEventListener","array","startIndex","map","_","index"],"sources":["/home/muneeb/assignment-krayo/frontend/node_modules/@primer/react/lib-esm/TreeView/useTypeahead.js"],"sourcesContent":["import React__default from 'react';\nimport useSafeTimeout from '../hooks/useSafeTimeout.js';\nimport { getAccessibleName } from './shared.js';\n\nfunction useTypeahead({\n  containerRef,\n  onFocusChange\n}) {\n  const searchValue = React__default.useRef('');\n  const timeoutRef = React__default.useRef(0);\n  const onFocusChangeRef = React__default.useRef(onFocusChange);\n  const {\n    safeSetTimeout,\n    safeClearTimeout\n  } = useSafeTimeout();\n\n  // Update the ref when the callback changes\n  React__default.useEffect(() => {\n    onFocusChangeRef.current = onFocusChange;\n  }, [onFocusChange]);\n\n  // Focus the closest element that matches the search value\n  const focusSearchValue = React__default.useCallback(searchValue => {\n    // Don't change focus if the search value is empty\n    if (!searchValue) return;\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n\n    // Get focusable elements\n    const elements = Array.from(container.querySelectorAll('[role=\"treeitem\"]'));\n\n    // Get the index of active element\n    const activeIndex = elements.findIndex(element => element === document.activeElement);\n\n    // Wrap the array elements such that the active descendant is at the beginning\n    let sortedElements = wrapArray(elements, activeIndex);\n\n    // Remove the active descendant from the beginning of the array\n    // when the user initiates a new search\n    if (searchValue.length === 1) {\n      sortedElements = sortedElements.slice(1);\n    }\n\n    // Find the first element that matches the search value\n    const nextElement = sortedElements.find(element => {\n      const name = getAccessibleName(element).toLowerCase();\n      return name.startsWith(searchValue.toLowerCase());\n    });\n\n    // If a match is found, focus it\n    if (nextElement) {\n      onFocusChangeRef.current(nextElement);\n    }\n  }, [containerRef]);\n\n  // Update the search value when the user types\n  React__default.useEffect(() => {\n    if (!containerRef.current) return;\n    const container = containerRef.current;\n    function onKeyDown(event) {\n      // Ignore key presses that don't produce a character value\n      if (!event.key || event.key.length > 1) return;\n\n      // Ignore key presses that occur with a modifier\n      if (event.ctrlKey || event.altKey || event.metaKey) return;\n\n      // Update the existing search value with the new key press\n      searchValue.current += event.key;\n      focusSearchValue(searchValue.current);\n\n      // Reset the timeout\n      safeClearTimeout(timeoutRef.current);\n      timeoutRef.current = safeSetTimeout(() => searchValue.current = '', 300);\n\n      // Prevent default behavior\n      event.preventDefault();\n      event.stopPropagation();\n    }\n    container.addEventListener('keydown', onKeyDown);\n    return () => container.removeEventListener('keydown', onKeyDown);\n  }, [containerRef, focusSearchValue, safeClearTimeout, safeSetTimeout]);\n}\n\n/**\n * Wraps an array around itself at a given start index\n *\n * @example\n * wrapArray(['a', 'b', 'c', 'd'], 2) // ['c', 'd', 'a', 'b']\n */\nfunction wrapArray(array, startIndex) {\n  return array.map((_, index) => array[(startIndex + index) % array.length]);\n}\n\nexport { useTypeahead };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}