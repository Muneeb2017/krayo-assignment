{"ast":null,"code":"import React__default from 'react';\nimport { iterateFocusableElements } from '@primer/behaviors/utils';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate.js';\n\n/*\n * A mnemonic indicates to the user which key to press (single)\n * to activate a command or navigate to a component\n * typically appearing in a menu title, menu item, or the text of a button.\n */\n\nconst useMnemonics = (open, providedRef) => {\n  const containerRef = useProvidedRefOrCreate(providedRef);\n  React__default.useEffect(function addAriaKeyshortcuts() {\n    if (!open || !containerRef.current) return;\n    const container = containerRef.current;\n    const focusableItems = [...iterateFocusableElements(container)];\n    focusableItems.map(item => {\n      var _item$textContent;\n      // if item already has aria-keyshortcuts defined by user, skip\n      if (item.getAttribute('aria-keyshortcuts')) return;\n      const firstLetter = (_item$textContent = item.textContent) === null || _item$textContent === void 0 ? void 0 : _item$textContent.toLowerCase()[0];\n      if (firstLetter) item.setAttribute('aria-keyshortcuts', firstLetter);\n    });\n  }, [open, containerRef]);\n  React__default.useEffect(function handleKeyDown() {\n    if (!open || !containerRef.current) return;\n    const container = containerRef.current;\n    const handler = event => {\n      var _elementToFocus;\n      // skip if a TextInput has focus\n      const activeElement = document.activeElement;\n      if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') return;\n\n      // skip if used with modifier to preserve shortcuts like ⌘ + F\n      const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n      if (hasModifier) return;\n\n      // skip if it's not a alphabet key\n      if (!isAlphabetKey(event)) return;\n\n      // if this is a typeahead event, don't propagate outside of menu\n      event.stopPropagation();\n      const query = event.key.toLowerCase();\n      let elementToFocus;\n      const focusableItems = [...iterateFocusableElements(container)];\n      const itemsMatchingKey = focusableItems.filter(item => {\n        var _item$getAttribute;\n        const keyshortcuts = (_item$getAttribute = item.getAttribute('aria-keyshortcuts')) === null || _item$getAttribute === void 0 ? void 0 : _item$getAttribute.split(' ').map(shortcut => shortcut.toLowerCase());\n        return keyshortcuts && keyshortcuts.includes(query);\n      });\n      const currentActiveIndex = itemsMatchingKey.indexOf(activeElement);\n\n      // If the last element is already selected, cycle through the list\n      if (currentActiveIndex === itemsMatchingKey.length - 1) {\n        elementToFocus = itemsMatchingKey[0];\n      } else {\n        elementToFocus = itemsMatchingKey.find((item, index) => {\n          return index > currentActiveIndex;\n        });\n      }\n      (_elementToFocus = elementToFocus) === null || _elementToFocus === void 0 ? void 0 : _elementToFocus.focus();\n    };\n    container.addEventListener('keydown', handler);\n    return () => container.removeEventListener('keydown', handler);\n  }, [open, containerRef]);\n  const isAlphabetKey = event => {\n    return event.key.length === 1 && /[a-z\\d]/i.test(event.key);\n  };\n  return {\n    containerRef\n  };\n};\nexport { useMnemonics };","map":{"version":3,"names":["React__default","iterateFocusableElements","useProvidedRefOrCreate","useMnemonics","open","providedRef","containerRef","useEffect","addAriaKeyshortcuts","current","container","focusableItems","map","item","_item$textContent","getAttribute","firstLetter","textContent","toLowerCase","setAttribute","handleKeyDown","handler","event","_elementToFocus","activeElement","document","tagName","hasModifier","ctrlKey","altKey","metaKey","isAlphabetKey","stopPropagation","query","key","elementToFocus","itemsMatchingKey","filter","_item$getAttribute","keyshortcuts","split","shortcut","includes","currentActiveIndex","indexOf","length","find","index","focus","addEventListener","removeEventListener","test"],"sources":["/home/muneeb/assignment-krayo/frontend/node_modules/@primer/react/lib-esm/hooks/useMnemonics.js"],"sourcesContent":["import React__default from 'react';\nimport { iterateFocusableElements } from '@primer/behaviors/utils';\nimport { useProvidedRefOrCreate } from './useProvidedRefOrCreate.js';\n\n/*\n * A mnemonic indicates to the user which key to press (single)\n * to activate a command or navigate to a component\n * typically appearing in a menu title, menu item, or the text of a button.\n */\n\nconst useMnemonics = (open, providedRef) => {\n  const containerRef = useProvidedRefOrCreate(providedRef);\n  React__default.useEffect(function addAriaKeyshortcuts() {\n    if (!open || !containerRef.current) return;\n    const container = containerRef.current;\n    const focusableItems = [...iterateFocusableElements(container)];\n    focusableItems.map(item => {\n      var _item$textContent;\n      // if item already has aria-keyshortcuts defined by user, skip\n      if (item.getAttribute('aria-keyshortcuts')) return;\n      const firstLetter = (_item$textContent = item.textContent) === null || _item$textContent === void 0 ? void 0 : _item$textContent.toLowerCase()[0];\n      if (firstLetter) item.setAttribute('aria-keyshortcuts', firstLetter);\n    });\n  }, [open, containerRef]);\n  React__default.useEffect(function handleKeyDown() {\n    if (!open || !containerRef.current) return;\n    const container = containerRef.current;\n    const handler = event => {\n      var _elementToFocus;\n      // skip if a TextInput has focus\n      const activeElement = document.activeElement;\n      if (activeElement.tagName === 'INPUT' || activeElement.tagName === 'TEXTAREA') return;\n\n      // skip if used with modifier to preserve shortcuts like ⌘ + F\n      const hasModifier = event.ctrlKey || event.altKey || event.metaKey;\n      if (hasModifier) return;\n\n      // skip if it's not a alphabet key\n      if (!isAlphabetKey(event)) return;\n\n      // if this is a typeahead event, don't propagate outside of menu\n      event.stopPropagation();\n      const query = event.key.toLowerCase();\n      let elementToFocus;\n      const focusableItems = [...iterateFocusableElements(container)];\n      const itemsMatchingKey = focusableItems.filter(item => {\n        var _item$getAttribute;\n        const keyshortcuts = (_item$getAttribute = item.getAttribute('aria-keyshortcuts')) === null || _item$getAttribute === void 0 ? void 0 : _item$getAttribute.split(' ').map(shortcut => shortcut.toLowerCase());\n        return keyshortcuts && keyshortcuts.includes(query);\n      });\n      const currentActiveIndex = itemsMatchingKey.indexOf(activeElement);\n\n      // If the last element is already selected, cycle through the list\n      if (currentActiveIndex === itemsMatchingKey.length - 1) {\n        elementToFocus = itemsMatchingKey[0];\n      } else {\n        elementToFocus = itemsMatchingKey.find((item, index) => {\n          return index > currentActiveIndex;\n        });\n      }\n      (_elementToFocus = elementToFocus) === null || _elementToFocus === void 0 ? void 0 : _elementToFocus.focus();\n    };\n    container.addEventListener('keydown', handler);\n    return () => container.removeEventListener('keydown', handler);\n  }, [open, containerRef]);\n  const isAlphabetKey = event => {\n    return event.key.length === 1 && /[a-z\\d]/i.test(event.key);\n  };\n  return {\n    containerRef\n  };\n};\n\nexport { useMnemonics };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}