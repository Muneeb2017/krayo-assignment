{"ast":null,"code":"var _jsxFileName = \"/home/muneeb/assignment-krayo/frontend/src/components/LoginWithGoogle.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport { useNavigate } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Loginwithgoogle = _ref => {\n  _s();\n  let {\n    isLoggedin,\n    setLoggedin\n  } = _ref;\n  const navigate = useNavigate();\n  // const [isLoggedin, setLoggedin] = useState(false);\n\n  const handleSuccess = async credentialResponse => {\n    console.log(credentialResponse.credential);\n    var decoded = jwt_decode(credentialResponse.credential);\n    console.log(decoded);\n    try {\n      const response = await fetch(\"/home\", {\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          accessToken: credentialResponse.credential\n        })\n      });\n      const {\n        accessToken\n      } = await response.json();\n      localStorage.setItem(\"credentialResponse.credential\", accessToken);\n      setLoggedin(true);\n      navigate(\"/home\");\n    } catch (error) {\n      console.error(\"Error logging in\", error);\n    }\n  };\n\n  // const handleSuccess = (credentialResponse) => {\n  //   console.log(credentialResponse.credential);\n  //   var decoded = jwt_decode(credentialResponse.credential);\n  //   console.log(decoded);\n\n  //   setLoggedin(true);\n  //   navigate(\"/home\");\n  // };\n\n  return /*#__PURE__*/_jsxDEV(GoogleLogin, {\n    onSuccess: handleSuccess,\n    onError: () => {\n      console.log(\"Login Failed\");\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(Loginwithgoogle, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Loginwithgoogle;\nexport default Loginwithgoogle;\nvar _c;\n$RefreshReg$(_c, \"Loginwithgoogle\");","map":{"version":3,"names":["React","useState","GoogleLogin","useNavigate","jwt_decode","jsxDEV","_jsxDEV","Loginwithgoogle","_ref","_s","isLoggedin","setLoggedin","navigate","handleSuccess","credentialResponse","console","log","credential","decoded","response","fetch","headers","body","JSON","stringify","accessToken","json","localStorage","setItem","error","onSuccess","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/muneeb/assignment-krayo/frontend/src/components/LoginWithGoogle.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport { useNavigate } from \"react-router-dom\";\nimport jwt_decode from \"jwt-decode\";\n\nconst Loginwithgoogle = ({ isLoggedin, setLoggedin }) => {\n  const navigate = useNavigate();\n  // const [isLoggedin, setLoggedin] = useState(false);\n\n  const handleSuccess = async (credentialResponse) => {\n    console.log(credentialResponse.credential);\n    var decoded = jwt_decode(credentialResponse.credential);\n    console.log(decoded);\n\n    try {\n      const response = await fetch(\"/home\", {\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ accessToken: credentialResponse.credential }),\n      });\n      const { accessToken } = await response.json();\n      localStorage.setItem(\"credentialResponse.credential\", accessToken);\n      setLoggedin(true);\n      navigate(\"/home\");\n    } catch (error) {\n      console.error(\"Error logging in\", error);\n    }\n  };\n\n  // const handleSuccess = (credentialResponse) => {\n  //   console.log(credentialResponse.credential);\n  //   var decoded = jwt_decode(credentialResponse.credential);\n  //   console.log(decoded);\n\n  //   setLoggedin(true);\n  //   navigate(\"/home\");\n  // };\n\n  return (\n    <GoogleLogin\n      onSuccess={handleSuccess}\n      onError={() => {\n        console.log(\"Login Failed\");\n      }}\n    />\n  );\n};\nexport default Loginwithgoogle;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,OAAOC,UAAU,MAAM,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,eAAe,GAAGC,IAAA,IAAiC;EAAAC,EAAA;EAAA,IAAhC;IAAEC,UAAU;IAAEC;EAAY,CAAC,GAAAH,IAAA;EAClD,MAAMI,QAAQ,GAAGT,WAAW,EAAE;EAC9B;;EAEA,MAAMU,aAAa,GAAG,MAAOC,kBAAkB,IAAK;IAClDC,OAAO,CAACC,GAAG,CAACF,kBAAkB,CAACG,UAAU,CAAC;IAC1C,IAAIC,OAAO,GAAGd,UAAU,CAACU,kBAAkB,CAACG,UAAU,CAAC;IACvDF,OAAO,CAACC,GAAG,CAACE,OAAO,CAAC;IAEpB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,OAAO,EAAE;QACpCC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEC,WAAW,EAAEX,kBAAkB,CAACG;QAAW,CAAC;MACrE,CAAC,CAAC;MACF,MAAM;QAAEQ;MAAY,CAAC,GAAG,MAAMN,QAAQ,CAACO,IAAI,EAAE;MAC7CC,YAAY,CAACC,OAAO,CAAC,+BAA+B,EAAEH,WAAW,CAAC;MAClEd,WAAW,CAAC,IAAI,CAAC;MACjBC,QAAQ,CAAC,OAAO,CAAC;IACnB,CAAC,CAAC,OAAOiB,KAAK,EAAE;MACdd,OAAO,CAACc,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C;EACF,CAAC;;EAED;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBACEvB,OAAA,CAACJ,WAAW;IACV4B,SAAS,EAAEjB,aAAc;IACzBkB,OAAO,EAAEA,CAAA,KAAM;MACbhB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC7B;EAAE;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEN,CAAC;AAAC1B,EAAA,CA1CIF,eAAe;EAAA,QACFJ,WAAW;AAAA;AAAAiC,EAAA,GADxB7B,eAAe;AA2CrB,eAAeA,eAAe;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}