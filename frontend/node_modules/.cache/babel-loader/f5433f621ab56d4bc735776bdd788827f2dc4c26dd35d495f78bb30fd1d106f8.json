{"ast":null,"code":"import React__default, { useContext, useRef, useState, useMemo, useEffect } from 'react';\nimport { scrollIntoView } from '@primer/behaviors';\nimport { ActionList } from '../deprecated/ActionList/index.js';\nimport { useFocusZone } from '../hooks/useFocusZone.js';\nimport { AutocompleteContext } from './AutocompleteContext.js';\nimport { PlusIcon } from '@primer/octicons-react';\nimport VisuallyHidden from '../_VisuallyHidden.js';\nimport Box from '../Box/Box.js';\nimport Spinner from '../Spinner/Spinner.js';\nimport { useSSRSafeId } from '@react-aria/ssr';\nconst getDefaultSortFn = isItemSelectedFn => (itemIdA, itemIdB) => isItemSelectedFn(itemIdA) === isItemSelectedFn(itemIdB) ? 0 : isItemSelectedFn(itemIdA) ? -1 : 1;\nconst menuScrollMargins = {\n  startMargin: 0,\n  endMargin: 8\n};\nfunction getDefaultItemFilter(filterValue) {\n  return function (item, _i) {\n    var _item$text;\n    return Boolean((_item$text = item.text) === null || _item$text === void 0 ? void 0 : _item$text.toLowerCase().startsWith(filterValue.toLowerCase()));\n  };\n}\nfunction getdefaultCheckedSelectionChange(setInputValueFn) {\n  return function (itemOrItems) {\n    const {\n      text = ''\n    } = Array.isArray(itemOrItems) ? itemOrItems.slice(-1)[0] : itemOrItems;\n    setInputValueFn(text);\n  };\n}\nconst isItemSelected = (itemId, selectedItemIds) => selectedItemIds.includes(itemId);\nfunction getItemById(itemId, items) {\n  return items.find(item => item.id === itemId);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction AutocompleteMenu(props) {\n  const autocompleteContext = useContext(AutocompleteContext);\n  if (autocompleteContext === null) {\n    throw new Error('AutocompleteContext returned null values');\n  }\n  const {\n    activeDescendantRef,\n    id,\n    inputRef,\n    inputValue = '',\n    scrollContainerRef,\n    setAutocompleteSuggestion,\n    setShowMenu,\n    setInputValue,\n    setIsMenuDirectlyActivated,\n    setSelectedItemLength,\n    showMenu\n  } = autocompleteContext;\n  const {\n    items,\n    selectedItemIds,\n    sortOnCloseFn,\n    emptyStateText = 'No selectable options',\n    addNewItem,\n    loading,\n    selectionVariant = 'single',\n    filterFn,\n    'aria-labelledby': ariaLabelledBy,\n    onOpenChange,\n    onSelectedChange,\n    customScrollContainerRef\n  } = props;\n  const listContainerRef = useRef(null);\n  const [highlightedItem, setHighlightedItem] = useState();\n  const [sortedItemIds, setSortedItemIds] = useState(items.map(_ref => {\n    let {\n      id: itemId\n    } = _ref;\n    return itemId;\n  }));\n  const generatedUniqueId = useSSRSafeId(id);\n  const selectableItems = useMemo(() => items.map(selectableItem => {\n    return {\n      ...selectableItem,\n      role: 'option',\n      id: selectableItem.id,\n      selected: selectionVariant === 'multiple' ? selectedItemIds.includes(selectableItem.id) : undefined,\n      onAction: item => {\n        const otherSelectedItemIds = selectedItemIds.filter(selectedItemId => selectedItemId !== item.id);\n        const newSelectedItemIds = selectedItemIds.includes(item.id) ? otherSelectedItemIds : [...otherSelectedItemIds, item.id];\n        const onSelectedChangeFn = onSelectedChange ? onSelectedChange : getdefaultCheckedSelectionChange(setInputValue);\n        onSelectedChangeFn(newSelectedItemIds.map(newSelectedItemId => getItemById(newSelectedItemId, items)));\n        if (selectionVariant === 'multiple') {\n          setInputValue('');\n          setAutocompleteSuggestion('');\n        } else {\n          var _inputRef$current;\n          setShowMenu(false);\n          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n        }\n      }\n    };\n  }), [items, selectedItemIds, inputRef, onSelectedChange, selectionVariant, setAutocompleteSuggestion, setInputValue, setShowMenu]);\n  const itemSortOrderData = useMemo(() => sortedItemIds.reduce((acc, curr, i) => {\n    acc[curr] = i;\n    return acc;\n  }, {}), [sortedItemIds]);\n  const sortedAndFilteredItemsToRender = useMemo(() => selectableItems.filter(filterFn ? filterFn : getDefaultItemFilter(inputValue)).sort((a, b) => itemSortOrderData[a.id] - itemSortOrderData[b.id]), [selectableItems, itemSortOrderData, filterFn, inputValue]);\n  const allItemsToRender = useMemo(() => [\n  // sorted and filtered selectable items\n  ...sortedAndFilteredItemsToRender,\n  // menu item used for creating a token from whatever is in the text input\n  ...(addNewItem ? [{\n    ...addNewItem,\n    leadingVisual: () => /*#__PURE__*/React__default.createElement(PlusIcon, null),\n    onAction: item => {\n      // TODO: make it possible to pass a leadingVisual when using `addNewItem`\n      addNewItem.handleAddItem({\n        ...item,\n        id: item.id || generatedUniqueId,\n        leadingVisual: undefined\n      });\n      if (selectionVariant === 'multiple') {\n        setInputValue('');\n        setAutocompleteSuggestion('');\n      }\n    }\n  }] : [])], [sortedAndFilteredItemsToRender, addNewItem, setAutocompleteSuggestion, selectionVariant, setInputValue, generatedUniqueId]);\n  useFocusZone({\n    containerRef: listContainerRef,\n    focusOutBehavior: 'wrap',\n    focusableElementFilter: element => {\n      return !(element instanceof HTMLInputElement);\n    },\n    activeDescendantFocus: inputRef,\n    onActiveDescendantChanged: (current, _previous, directlyActivated) => {\n      activeDescendantRef.current = current || null;\n      if (current) {\n        const selectedItem = selectableItems.find(item => item.id.toString() === current.getAttribute('data-id'));\n        setHighlightedItem(selectedItem);\n        setIsMenuDirectlyActivated(directlyActivated);\n      }\n      if (current && customScrollContainerRef && customScrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, customScrollContainerRef.current, menuScrollMargins);\n      } else if (current && scrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, scrollContainerRef.current, menuScrollMargins);\n      }\n    }\n  }, [loading]);\n  useEffect(() => {\n    var _highlightedItem$text;\n    if (highlightedItem !== null && highlightedItem !== void 0 && (_highlightedItem$text = highlightedItem.text) !== null && _highlightedItem$text !== void 0 && _highlightedItem$text.startsWith(inputValue) && !selectedItemIds.includes(highlightedItem.id)) {\n      setAutocompleteSuggestion(highlightedItem.text);\n    } else {\n      setAutocompleteSuggestion('');\n    }\n  }, [highlightedItem, inputValue, selectedItemIds, setAutocompleteSuggestion]);\n  useEffect(() => {\n    const itemIdSortResult = [...sortedItemIds].sort(sortOnCloseFn ? sortOnCloseFn : getDefaultSortFn(itemId => isItemSelected(itemId, selectedItemIds)));\n    const sortResultMatchesState = itemIdSortResult.length === sortedItemIds.length && itemIdSortResult.every((element, index) => element === sortedItemIds[index]);\n    if (showMenu === false && !sortResultMatchesState) {\n      setSortedItemIds(itemIdSortResult);\n    }\n    onOpenChange && onOpenChange(Boolean(showMenu));\n  }, [showMenu, onOpenChange, selectedItemIds, sortOnCloseFn, sortedItemIds]);\n  useEffect(() => {\n    if (selectedItemIds.length) {\n      setSelectedItemLength(selectedItemIds.length);\n    }\n  }, [selectedItemIds, setSelectedItemLength]);\n  return /*#__PURE__*/React__default.createElement(VisuallyHidden, {\n    isVisible: showMenu\n  }, loading ? /*#__PURE__*/React__default.createElement(Box, {\n    p: 3,\n    display: \"flex\",\n    justifyContent: \"center\"\n  }, /*#__PURE__*/React__default.createElement(Spinner, null)) : /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: listContainerRef\n  }, allItemsToRender.length ? /*#__PURE__*/React__default.createElement(ActionList, {\n    selectionVariant: \"multiple\"\n    // have to typecast to `ItemProps` because we have an extra property\n    // on `items` for Autocomplete: `metadata`\n    ,\n\n    items: allItemsToRender,\n    role: \"listbox\",\n    id: `${id}-listbox`,\n    \"aria-labelledby\": ariaLabelledBy\n  }) : /*#__PURE__*/React__default.createElement(Box, {\n    p: 3\n  }, emptyStateText)));\n}\nAutocompleteMenu.displayName = \"AutocompleteMenu\";\nAutocompleteMenu.displayName = 'AutocompleteMenu';\nexport { AutocompleteMenu as default };","map":{"version":3,"names":["React__default","useContext","useRef","useState","useMemo","useEffect","scrollIntoView","ActionList","useFocusZone","AutocompleteContext","PlusIcon","VisuallyHidden","Box","Spinner","useSSRSafeId","getDefaultSortFn","isItemSelectedFn","itemIdA","itemIdB","menuScrollMargins","startMargin","endMargin","getDefaultItemFilter","filterValue","item","_i","_item$text","Boolean","text","toLowerCase","startsWith","getdefaultCheckedSelectionChange","setInputValueFn","itemOrItems","Array","isArray","slice","isItemSelected","itemId","selectedItemIds","includes","getItemById","items","find","id","AutocompleteMenu","props","autocompleteContext","Error","activeDescendantRef","inputRef","inputValue","scrollContainerRef","setAutocompleteSuggestion","setShowMenu","setInputValue","setIsMenuDirectlyActivated","setSelectedItemLength","showMenu","sortOnCloseFn","emptyStateText","addNewItem","loading","selectionVariant","filterFn","ariaLabelledBy","onOpenChange","onSelectedChange","customScrollContainerRef","listContainerRef","highlightedItem","setHighlightedItem","sortedItemIds","setSortedItemIds","map","_ref","generatedUniqueId","selectableItems","selectableItem","role","selected","undefined","onAction","otherSelectedItemIds","filter","selectedItemId","newSelectedItemIds","onSelectedChangeFn","newSelectedItemId","_inputRef$current","current","setSelectionRange","value","length","itemSortOrderData","reduce","acc","curr","i","sortedAndFilteredItemsToRender","sort","a","b","allItemsToRender","leadingVisual","createElement","handleAddItem","containerRef","focusOutBehavior","focusableElementFilter","element","HTMLInputElement","activeDescendantFocus","onActiveDescendantChanged","_previous","directlyActivated","selectedItem","toString","getAttribute","_highlightedItem$text","itemIdSortResult","sortResultMatchesState","every","index","isVisible","p","display","justifyContent","ref","displayName","default"],"sources":["/home/muneeb/assignment-krayo/frontend/node_modules/@primer/react/lib-esm/Autocomplete/AutocompleteMenu.js"],"sourcesContent":["import React__default, { useContext, useRef, useState, useMemo, useEffect } from 'react';\nimport { scrollIntoView } from '@primer/behaviors';\nimport { ActionList } from '../deprecated/ActionList/index.js';\nimport { useFocusZone } from '../hooks/useFocusZone.js';\nimport { AutocompleteContext } from './AutocompleteContext.js';\nimport { PlusIcon } from '@primer/octicons-react';\nimport VisuallyHidden from '../_VisuallyHidden.js';\nimport Box from '../Box/Box.js';\nimport Spinner from '../Spinner/Spinner.js';\nimport { useSSRSafeId } from '@react-aria/ssr';\n\nconst getDefaultSortFn = isItemSelectedFn => (itemIdA, itemIdB) => isItemSelectedFn(itemIdA) === isItemSelectedFn(itemIdB) ? 0 : isItemSelectedFn(itemIdA) ? -1 : 1;\nconst menuScrollMargins = {\n  startMargin: 0,\n  endMargin: 8\n};\nfunction getDefaultItemFilter(filterValue) {\n  return function (item, _i) {\n    var _item$text;\n    return Boolean((_item$text = item.text) === null || _item$text === void 0 ? void 0 : _item$text.toLowerCase().startsWith(filterValue.toLowerCase()));\n  };\n}\nfunction getdefaultCheckedSelectionChange(setInputValueFn) {\n  return function (itemOrItems) {\n    const {\n      text = ''\n    } = Array.isArray(itemOrItems) ? itemOrItems.slice(-1)[0] : itemOrItems;\n    setInputValueFn(text);\n  };\n}\nconst isItemSelected = (itemId, selectedItemIds) => selectedItemIds.includes(itemId);\nfunction getItemById(itemId, items) {\n  return items.find(item => item.id === itemId);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\nfunction AutocompleteMenu(props) {\n  const autocompleteContext = useContext(AutocompleteContext);\n  if (autocompleteContext === null) {\n    throw new Error('AutocompleteContext returned null values');\n  }\n  const {\n    activeDescendantRef,\n    id,\n    inputRef,\n    inputValue = '',\n    scrollContainerRef,\n    setAutocompleteSuggestion,\n    setShowMenu,\n    setInputValue,\n    setIsMenuDirectlyActivated,\n    setSelectedItemLength,\n    showMenu\n  } = autocompleteContext;\n  const {\n    items,\n    selectedItemIds,\n    sortOnCloseFn,\n    emptyStateText = 'No selectable options',\n    addNewItem,\n    loading,\n    selectionVariant = 'single',\n    filterFn,\n    'aria-labelledby': ariaLabelledBy,\n    onOpenChange,\n    onSelectedChange,\n    customScrollContainerRef\n  } = props;\n  const listContainerRef = useRef(null);\n  const [highlightedItem, setHighlightedItem] = useState();\n  const [sortedItemIds, setSortedItemIds] = useState(items.map(({\n    id: itemId\n  }) => itemId));\n  const generatedUniqueId = useSSRSafeId(id);\n  const selectableItems = useMemo(() => items.map(selectableItem => {\n    return {\n      ...selectableItem,\n      role: 'option',\n      id: selectableItem.id,\n      selected: selectionVariant === 'multiple' ? selectedItemIds.includes(selectableItem.id) : undefined,\n      onAction: item => {\n        const otherSelectedItemIds = selectedItemIds.filter(selectedItemId => selectedItemId !== item.id);\n        const newSelectedItemIds = selectedItemIds.includes(item.id) ? otherSelectedItemIds : [...otherSelectedItemIds, item.id];\n        const onSelectedChangeFn = onSelectedChange ? onSelectedChange : getdefaultCheckedSelectionChange(setInputValue);\n        onSelectedChangeFn(newSelectedItemIds.map(newSelectedItemId => getItemById(newSelectedItemId, items)));\n        if (selectionVariant === 'multiple') {\n          setInputValue('');\n          setAutocompleteSuggestion('');\n        } else {\n          var _inputRef$current;\n          setShowMenu(false);\n          (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.setSelectionRange(inputRef.current.value.length, inputRef.current.value.length);\n        }\n      }\n    };\n  }), [items, selectedItemIds, inputRef, onSelectedChange, selectionVariant, setAutocompleteSuggestion, setInputValue, setShowMenu]);\n  const itemSortOrderData = useMemo(() => sortedItemIds.reduce((acc, curr, i) => {\n    acc[curr] = i;\n    return acc;\n  }, {}), [sortedItemIds]);\n  const sortedAndFilteredItemsToRender = useMemo(() => selectableItems.filter(filterFn ? filterFn : getDefaultItemFilter(inputValue)).sort((a, b) => itemSortOrderData[a.id] - itemSortOrderData[b.id]), [selectableItems, itemSortOrderData, filterFn, inputValue]);\n  const allItemsToRender = useMemo(() => [\n  // sorted and filtered selectable items\n  ...sortedAndFilteredItemsToRender,\n  // menu item used for creating a token from whatever is in the text input\n  ...(addNewItem ? [{\n    ...addNewItem,\n    leadingVisual: () => /*#__PURE__*/React__default.createElement(PlusIcon, null),\n    onAction: item => {\n      // TODO: make it possible to pass a leadingVisual when using `addNewItem`\n      addNewItem.handleAddItem({\n        ...item,\n        id: item.id || generatedUniqueId,\n        leadingVisual: undefined\n      });\n      if (selectionVariant === 'multiple') {\n        setInputValue('');\n        setAutocompleteSuggestion('');\n      }\n    }\n  }] : [])], [sortedAndFilteredItemsToRender, addNewItem, setAutocompleteSuggestion, selectionVariant, setInputValue, generatedUniqueId]);\n  useFocusZone({\n    containerRef: listContainerRef,\n    focusOutBehavior: 'wrap',\n    focusableElementFilter: element => {\n      return !(element instanceof HTMLInputElement);\n    },\n    activeDescendantFocus: inputRef,\n    onActiveDescendantChanged: (current, _previous, directlyActivated) => {\n      activeDescendantRef.current = current || null;\n      if (current) {\n        const selectedItem = selectableItems.find(item => item.id.toString() === current.getAttribute('data-id'));\n        setHighlightedItem(selectedItem);\n        setIsMenuDirectlyActivated(directlyActivated);\n      }\n      if (current && customScrollContainerRef && customScrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, customScrollContainerRef.current, menuScrollMargins);\n      } else if (current && scrollContainerRef.current && directlyActivated) {\n        scrollIntoView(current, scrollContainerRef.current, menuScrollMargins);\n      }\n    }\n  }, [loading]);\n  useEffect(() => {\n    var _highlightedItem$text;\n    if (highlightedItem !== null && highlightedItem !== void 0 && (_highlightedItem$text = highlightedItem.text) !== null && _highlightedItem$text !== void 0 && _highlightedItem$text.startsWith(inputValue) && !selectedItemIds.includes(highlightedItem.id)) {\n      setAutocompleteSuggestion(highlightedItem.text);\n    } else {\n      setAutocompleteSuggestion('');\n    }\n  }, [highlightedItem, inputValue, selectedItemIds, setAutocompleteSuggestion]);\n  useEffect(() => {\n    const itemIdSortResult = [...sortedItemIds].sort(sortOnCloseFn ? sortOnCloseFn : getDefaultSortFn(itemId => isItemSelected(itemId, selectedItemIds)));\n    const sortResultMatchesState = itemIdSortResult.length === sortedItemIds.length && itemIdSortResult.every((element, index) => element === sortedItemIds[index]);\n    if (showMenu === false && !sortResultMatchesState) {\n      setSortedItemIds(itemIdSortResult);\n    }\n    onOpenChange && onOpenChange(Boolean(showMenu));\n  }, [showMenu, onOpenChange, selectedItemIds, sortOnCloseFn, sortedItemIds]);\n  useEffect(() => {\n    if (selectedItemIds.length) {\n      setSelectedItemLength(selectedItemIds.length);\n    }\n  }, [selectedItemIds, setSelectedItemLength]);\n  return /*#__PURE__*/React__default.createElement(VisuallyHidden, {\n    isVisible: showMenu\n  }, loading ? /*#__PURE__*/React__default.createElement(Box, {\n    p: 3,\n    display: \"flex\",\n    justifyContent: \"center\"\n  }, /*#__PURE__*/React__default.createElement(Spinner, null)) : /*#__PURE__*/React__default.createElement(\"div\", {\n    ref: listContainerRef\n  }, allItemsToRender.length ? /*#__PURE__*/React__default.createElement(ActionList, {\n    selectionVariant: \"multiple\"\n    // have to typecast to `ItemProps` because we have an extra property\n    // on `items` for Autocomplete: `metadata`\n    ,\n    items: allItemsToRender,\n    role: \"listbox\",\n    id: `${id}-listbox`,\n    \"aria-labelledby\": ariaLabelledBy\n  }) : /*#__PURE__*/React__default.createElement(Box, {\n    p: 3\n  }, emptyStateText)));\n}\nAutocompleteMenu.displayName = \"AutocompleteMenu\";\nAutocompleteMenu.displayName = 'AutocompleteMenu';\n\nexport { AutocompleteMenu as default };\n"],"mappings":"AAAA,OAAOA,cAAc,IAAIC,UAAU,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AACxF,SAASC,cAAc,QAAQ,mBAAmB;AAClD,SAASC,UAAU,QAAQ,mCAAmC;AAC9D,SAASC,YAAY,QAAQ,0BAA0B;AACvD,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,QAAQ,QAAQ,wBAAwB;AACjD,OAAOC,cAAc,MAAM,uBAAuB;AAClD,OAAOC,GAAG,MAAM,eAAe;AAC/B,OAAOC,OAAO,MAAM,uBAAuB;AAC3C,SAASC,YAAY,QAAQ,iBAAiB;AAE9C,MAAMC,gBAAgB,GAAGC,gBAAgB,IAAI,CAACC,OAAO,EAAEC,OAAO,KAAKF,gBAAgB,CAACC,OAAO,CAAC,KAAKD,gBAAgB,CAACE,OAAO,CAAC,GAAG,CAAC,GAAGF,gBAAgB,CAACC,OAAO,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC;AACnK,MAAME,iBAAiB,GAAG;EACxBC,WAAW,EAAE,CAAC;EACdC,SAAS,EAAE;AACb,CAAC;AACD,SAASC,oBAAoBA,CAACC,WAAW,EAAE;EACzC,OAAO,UAAUC,IAAI,EAAEC,EAAE,EAAE;IACzB,IAAIC,UAAU;IACd,OAAOC,OAAO,CAAC,CAACD,UAAU,GAAGF,IAAI,CAACI,IAAI,MAAM,IAAI,IAAIF,UAAU,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,UAAU,CAACG,WAAW,EAAE,CAACC,UAAU,CAACP,WAAW,CAACM,WAAW,EAAE,CAAC,CAAC;EACtJ,CAAC;AACH;AACA,SAASE,gCAAgCA,CAACC,eAAe,EAAE;EACzD,OAAO,UAAUC,WAAW,EAAE;IAC5B,MAAM;MACJL,IAAI,GAAG;IACT,CAAC,GAAGM,KAAK,CAACC,OAAO,CAACF,WAAW,CAAC,GAAGA,WAAW,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGH,WAAW;IACvED,eAAe,CAACJ,IAAI,CAAC;EACvB,CAAC;AACH;AACA,MAAMS,cAAc,GAAGA,CAACC,MAAM,EAAEC,eAAe,KAAKA,eAAe,CAACC,QAAQ,CAACF,MAAM,CAAC;AACpF,SAASG,WAAWA,CAACH,MAAM,EAAEI,KAAK,EAAE;EAClC,OAAOA,KAAK,CAACC,IAAI,CAACnB,IAAI,IAAIA,IAAI,CAACoB,EAAE,KAAKN,MAAM,CAAC;AAC/C;;AAEA;;AAEA,SAASO,gBAAgBA,CAACC,KAAK,EAAE;EAC/B,MAAMC,mBAAmB,GAAG9C,UAAU,CAACQ,mBAAmB,CAAC;EAC3D,IAAIsC,mBAAmB,KAAK,IAAI,EAAE;IAChC,MAAM,IAAIC,KAAK,CAAC,0CAA0C,CAAC;EAC7D;EACA,MAAM;IACJC,mBAAmB;IACnBL,EAAE;IACFM,QAAQ;IACRC,UAAU,GAAG,EAAE;IACfC,kBAAkB;IAClBC,yBAAyB;IACzBC,WAAW;IACXC,aAAa;IACbC,0BAA0B;IAC1BC,qBAAqB;IACrBC;EACF,CAAC,GAAGX,mBAAmB;EACvB,MAAM;IACJL,KAAK;IACLH,eAAe;IACfoB,aAAa;IACbC,cAAc,GAAG,uBAAuB;IACxCC,UAAU;IACVC,OAAO;IACPC,gBAAgB,GAAG,QAAQ;IAC3BC,QAAQ;IACR,iBAAiB,EAAEC,cAAc;IACjCC,YAAY;IACZC,gBAAgB;IAChBC;EACF,CAAC,GAAGtB,KAAK;EACT,MAAMuB,gBAAgB,GAAGnE,MAAM,CAAC,IAAI,CAAC;EACrC,MAAM,CAACoE,eAAe,EAAEC,kBAAkB,CAAC,GAAGpE,QAAQ,EAAE;EACxD,MAAM,CAACqE,aAAa,EAAEC,gBAAgB,CAAC,GAAGtE,QAAQ,CAACuC,KAAK,CAACgC,GAAG,CAACC,IAAA;IAAA,IAAC;MAC5D/B,EAAE,EAAEN;IACN,CAAC,GAAAqC,IAAA;IAAA,OAAKrC,MAAM;EAAA,EAAC,CAAC;EACd,MAAMsC,iBAAiB,GAAG9D,YAAY,CAAC8B,EAAE,CAAC;EAC1C,MAAMiC,eAAe,GAAGzE,OAAO,CAAC,MAAMsC,KAAK,CAACgC,GAAG,CAACI,cAAc,IAAI;IAChE,OAAO;MACL,GAAGA,cAAc;MACjBC,IAAI,EAAE,QAAQ;MACdnC,EAAE,EAAEkC,cAAc,CAAClC,EAAE;MACrBoC,QAAQ,EAAEjB,gBAAgB,KAAK,UAAU,GAAGxB,eAAe,CAACC,QAAQ,CAACsC,cAAc,CAAClC,EAAE,CAAC,GAAGqC,SAAS;MACnGC,QAAQ,EAAE1D,IAAI,IAAI;QAChB,MAAM2D,oBAAoB,GAAG5C,eAAe,CAAC6C,MAAM,CAACC,cAAc,IAAIA,cAAc,KAAK7D,IAAI,CAACoB,EAAE,CAAC;QACjG,MAAM0C,kBAAkB,GAAG/C,eAAe,CAACC,QAAQ,CAAChB,IAAI,CAACoB,EAAE,CAAC,GAAGuC,oBAAoB,GAAG,CAAC,GAAGA,oBAAoB,EAAE3D,IAAI,CAACoB,EAAE,CAAC;QACxH,MAAM2C,kBAAkB,GAAGpB,gBAAgB,GAAGA,gBAAgB,GAAGpC,gCAAgC,CAACwB,aAAa,CAAC;QAChHgC,kBAAkB,CAACD,kBAAkB,CAACZ,GAAG,CAACc,iBAAiB,IAAI/C,WAAW,CAAC+C,iBAAiB,EAAE9C,KAAK,CAAC,CAAC,CAAC;QACtG,IAAIqB,gBAAgB,KAAK,UAAU,EAAE;UACnCR,aAAa,CAAC,EAAE,CAAC;UACjBF,yBAAyB,CAAC,EAAE,CAAC;QAC/B,CAAC,MAAM;UACL,IAAIoC,iBAAiB;UACrBnC,WAAW,CAAC,KAAK,CAAC;UAClB,CAACmC,iBAAiB,GAAGvC,QAAQ,CAACwC,OAAO,MAAM,IAAI,IAAID,iBAAiB,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,iBAAiB,CAACE,iBAAiB,CAACzC,QAAQ,CAACwC,OAAO,CAACE,KAAK,CAACC,MAAM,EAAE3C,QAAQ,CAACwC,OAAO,CAACE,KAAK,CAACC,MAAM,CAAC;QAC9L;MACF;IACF,CAAC;EACH,CAAC,CAAC,EAAE,CAACnD,KAAK,EAAEH,eAAe,EAAEW,QAAQ,EAAEiB,gBAAgB,EAAEJ,gBAAgB,EAAEV,yBAAyB,EAAEE,aAAa,EAAED,WAAW,CAAC,CAAC;EAClI,MAAMwC,iBAAiB,GAAG1F,OAAO,CAAC,MAAMoE,aAAa,CAACuB,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,EAAEC,CAAC,KAAK;IAC7EF,GAAG,CAACC,IAAI,CAAC,GAAGC,CAAC;IACb,OAAOF,GAAG;EACZ,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAACxB,aAAa,CAAC,CAAC;EACxB,MAAM2B,8BAA8B,GAAG/F,OAAO,CAAC,MAAMyE,eAAe,CAACO,MAAM,CAACpB,QAAQ,GAAGA,QAAQ,GAAG1C,oBAAoB,CAAC6B,UAAU,CAAC,CAAC,CAACiD,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKR,iBAAiB,CAACO,CAAC,CAACzD,EAAE,CAAC,GAAGkD,iBAAiB,CAACQ,CAAC,CAAC1D,EAAE,CAAC,CAAC,EAAE,CAACiC,eAAe,EAAEiB,iBAAiB,EAAE9B,QAAQ,EAAEb,UAAU,CAAC,CAAC;EAClQ,MAAMoD,gBAAgB,GAAGnG,OAAO,CAAC,MAAM;EACvC;EACA,GAAG+F,8BAA8B;EACjC;EACA,IAAItC,UAAU,GAAG,CAAC;IAChB,GAAGA,UAAU;IACb2C,aAAa,EAAEA,CAAA,KAAM,aAAaxG,cAAc,CAACyG,aAAa,CAAC/F,QAAQ,EAAE,IAAI,CAAC;IAC9EwE,QAAQ,EAAE1D,IAAI,IAAI;MAChB;MACAqC,UAAU,CAAC6C,aAAa,CAAC;QACvB,GAAGlF,IAAI;QACPoB,EAAE,EAAEpB,IAAI,CAACoB,EAAE,IAAIgC,iBAAiB;QAChC4B,aAAa,EAAEvB;MACjB,CAAC,CAAC;MACF,IAAIlB,gBAAgB,KAAK,UAAU,EAAE;QACnCR,aAAa,CAAC,EAAE,CAAC;QACjBF,yBAAyB,CAAC,EAAE,CAAC;MAC/B;IACF;EACF,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC,EAAE,CAAC8C,8BAA8B,EAAEtC,UAAU,EAAER,yBAAyB,EAAEU,gBAAgB,EAAER,aAAa,EAAEqB,iBAAiB,CAAC,CAAC;EACvIpE,YAAY,CAAC;IACXmG,YAAY,EAAEtC,gBAAgB;IAC9BuC,gBAAgB,EAAE,MAAM;IACxBC,sBAAsB,EAAEC,OAAO,IAAI;MACjC,OAAO,EAAEA,OAAO,YAAYC,gBAAgB,CAAC;IAC/C,CAAC;IACDC,qBAAqB,EAAE9D,QAAQ;IAC/B+D,yBAAyB,EAAEA,CAACvB,OAAO,EAAEwB,SAAS,EAAEC,iBAAiB,KAAK;MACpElE,mBAAmB,CAACyC,OAAO,GAAGA,OAAO,IAAI,IAAI;MAC7C,IAAIA,OAAO,EAAE;QACX,MAAM0B,YAAY,GAAGvC,eAAe,CAAClC,IAAI,CAACnB,IAAI,IAAIA,IAAI,CAACoB,EAAE,CAACyE,QAAQ,EAAE,KAAK3B,OAAO,CAAC4B,YAAY,CAAC,SAAS,CAAC,CAAC;QACzG/C,kBAAkB,CAAC6C,YAAY,CAAC;QAChC5D,0BAA0B,CAAC2D,iBAAiB,CAAC;MAC/C;MACA,IAAIzB,OAAO,IAAItB,wBAAwB,IAAIA,wBAAwB,CAACsB,OAAO,IAAIyB,iBAAiB,EAAE;QAChG7G,cAAc,CAACoF,OAAO,EAAEtB,wBAAwB,CAACsB,OAAO,EAAEvE,iBAAiB,CAAC;MAC9E,CAAC,MAAM,IAAIuE,OAAO,IAAItC,kBAAkB,CAACsC,OAAO,IAAIyB,iBAAiB,EAAE;QACrE7G,cAAc,CAACoF,OAAO,EAAEtC,kBAAkB,CAACsC,OAAO,EAAEvE,iBAAiB,CAAC;MACxE;IACF;EACF,CAAC,EAAE,CAAC2C,OAAO,CAAC,CAAC;EACbzD,SAAS,CAAC,MAAM;IACd,IAAIkH,qBAAqB;IACzB,IAAIjD,eAAe,KAAK,IAAI,IAAIA,eAAe,KAAK,KAAK,CAAC,IAAI,CAACiD,qBAAqB,GAAGjD,eAAe,CAAC1C,IAAI,MAAM,IAAI,IAAI2F,qBAAqB,KAAK,KAAK,CAAC,IAAIA,qBAAqB,CAACzF,UAAU,CAACqB,UAAU,CAAC,IAAI,CAACZ,eAAe,CAACC,QAAQ,CAAC8B,eAAe,CAAC1B,EAAE,CAAC,EAAE;MAC1PS,yBAAyB,CAACiB,eAAe,CAAC1C,IAAI,CAAC;IACjD,CAAC,MAAM;MACLyB,yBAAyB,CAAC,EAAE,CAAC;IAC/B;EACF,CAAC,EAAE,CAACiB,eAAe,EAAEnB,UAAU,EAAEZ,eAAe,EAAEc,yBAAyB,CAAC,CAAC;EAC7EhD,SAAS,CAAC,MAAM;IACd,MAAMmH,gBAAgB,GAAG,CAAC,GAAGhD,aAAa,CAAC,CAAC4B,IAAI,CAACzC,aAAa,GAAGA,aAAa,GAAG5C,gBAAgB,CAACuB,MAAM,IAAID,cAAc,CAACC,MAAM,EAAEC,eAAe,CAAC,CAAC,CAAC;IACrJ,MAAMkF,sBAAsB,GAAGD,gBAAgB,CAAC3B,MAAM,KAAKrB,aAAa,CAACqB,MAAM,IAAI2B,gBAAgB,CAACE,KAAK,CAAC,CAACZ,OAAO,EAAEa,KAAK,KAAKb,OAAO,KAAKtC,aAAa,CAACmD,KAAK,CAAC,CAAC;IAC/J,IAAIjE,QAAQ,KAAK,KAAK,IAAI,CAAC+D,sBAAsB,EAAE;MACjDhD,gBAAgB,CAAC+C,gBAAgB,CAAC;IACpC;IACAtD,YAAY,IAAIA,YAAY,CAACvC,OAAO,CAAC+B,QAAQ,CAAC,CAAC;EACjD,CAAC,EAAE,CAACA,QAAQ,EAAEQ,YAAY,EAAE3B,eAAe,EAAEoB,aAAa,EAAEa,aAAa,CAAC,CAAC;EAC3EnE,SAAS,CAAC,MAAM;IACd,IAAIkC,eAAe,CAACsD,MAAM,EAAE;MAC1BpC,qBAAqB,CAAClB,eAAe,CAACsD,MAAM,CAAC;IAC/C;EACF,CAAC,EAAE,CAACtD,eAAe,EAAEkB,qBAAqB,CAAC,CAAC;EAC5C,OAAO,aAAazD,cAAc,CAACyG,aAAa,CAAC9F,cAAc,EAAE;IAC/DiH,SAAS,EAAElE;EACb,CAAC,EAAEI,OAAO,GAAG,aAAa9D,cAAc,CAACyG,aAAa,CAAC7F,GAAG,EAAE;IAC1DiH,CAAC,EAAE,CAAC;IACJC,OAAO,EAAE,MAAM;IACfC,cAAc,EAAE;EAClB,CAAC,EAAE,aAAa/H,cAAc,CAACyG,aAAa,CAAC5F,OAAO,EAAE,IAAI,CAAC,CAAC,GAAG,aAAab,cAAc,CAACyG,aAAa,CAAC,KAAK,EAAE;IAC9GuB,GAAG,EAAE3D;EACP,CAAC,EAAEkC,gBAAgB,CAACV,MAAM,GAAG,aAAa7F,cAAc,CAACyG,aAAa,CAAClG,UAAU,EAAE;IACjFwD,gBAAgB,EAAE;IAClB;IACA;IAAA;;IAEArB,KAAK,EAAE6D,gBAAgB;IACvBxB,IAAI,EAAE,SAAS;IACfnC,EAAE,EAAG,GAAEA,EAAG,UAAS;IACnB,iBAAiB,EAAEqB;EACrB,CAAC,CAAC,GAAG,aAAajE,cAAc,CAACyG,aAAa,CAAC7F,GAAG,EAAE;IAClDiH,CAAC,EAAE;EACL,CAAC,EAAEjE,cAAc,CAAC,CAAC,CAAC;AACtB;AACAf,gBAAgB,CAACoF,WAAW,GAAG,kBAAkB;AACjDpF,gBAAgB,CAACoF,WAAW,GAAG,kBAAkB;AAEjD,SAASpF,gBAAgB,IAAIqF,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}