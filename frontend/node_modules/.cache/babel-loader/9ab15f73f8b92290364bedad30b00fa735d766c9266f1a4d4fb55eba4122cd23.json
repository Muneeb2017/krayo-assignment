{"ast":null,"code":"import { useMedia } from './useMedia.js';\n\n// This file contains utilities for working with responsive values.\n\n// The viewport range values from @primer/primtives don't work in Chrome\n// because they use `em` units inside `calc()` (e.g., calc(48em - 0.02px)).\n// As a temporary workaround, we're hardcoding the viewport ranges in `px` units.\n// TODO: Use viewport range tokens from @primer/primitives\nconst viewportRanges = {\n  narrow: '(max-width: calc(768px - 0.02px))',\n  // < 768px\n  regular: '(min-width: 768px)',\n  // >= 768px\n  wide: '(min-width: 1400px)' // >= 1400px\n};\n\n/**\n * Checks if the value is a responsive value.\n * In other words, is it an object with viewport range keys?\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isResponsiveValue(value) {\n  return typeof value === 'object' && Object.keys(value).some(key => ['narrow', 'regular', 'wide'].includes(key));\n}\n\n/**\n * Resolves responsive values based on the current viewport width.\n * For example, if the current viewport width is narrow (less than 768px), the value of `{regular: 'foo', narrow: 'bar'}` will resolve to `'bar'`.\n *\n * @example\n * const value = useResponsiveValue({regular: 'foo', narrow: 'bar'})\n * console.log(value) // 'bar'\n */\n// TODO: Improve SRR support\nfunction useResponsiveValue(value, fallback) {\n  // Check viewport size\n  // TODO: What is the performance cost of creating media query listeners in this hook?\n  const isNarrowViewport = useMedia(viewportRanges.narrow, false);\n  const isRegularViewport = useMedia(viewportRanges.regular, false);\n  const isWideViewport = useMedia(viewportRanges.wide, false);\n  if (isResponsiveValue(value)) {\n    // If we've reached this line, we know that value is a responsive value\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const responsiveValue = value;\n    if (isNarrowViewport && 'narrow' in responsiveValue) {\n      return responsiveValue.narrow;\n    } else if (isWideViewport && 'wide' in responsiveValue) {\n      return responsiveValue.wide;\n    } else if (isRegularViewport && 'regular' in responsiveValue) {\n      return responsiveValue.regular;\n    } else {\n      return fallback;\n    }\n  } else {\n    // If we've reached this line, we know that value is not a responsive value\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return value;\n  }\n}\nexport { isResponsiveValue, useResponsiveValue, viewportRanges };","map":{"version":3,"names":["useMedia","viewportRanges","narrow","regular","wide","isResponsiveValue","value","Object","keys","some","key","includes","useResponsiveValue","fallback","isNarrowViewport","isRegularViewport","isWideViewport","responsiveValue"],"sources":["/home/muneeb/assignment-krayo/frontend/node_modules/@primer/react/lib-esm/hooks/useResponsiveValue.js"],"sourcesContent":["import { useMedia } from './useMedia.js';\n\n// This file contains utilities for working with responsive values.\n\n// The viewport range values from @primer/primtives don't work in Chrome\n// because they use `em` units inside `calc()` (e.g., calc(48em - 0.02px)).\n// As a temporary workaround, we're hardcoding the viewport ranges in `px` units.\n// TODO: Use viewport range tokens from @primer/primitives\nconst viewportRanges = {\n  narrow: '(max-width: calc(768px - 0.02px))',\n  // < 768px\n  regular: '(min-width: 768px)',\n  // >= 768px\n  wide: '(min-width: 1400px)' // >= 1400px\n};\n\n/**\n * Checks if the value is a responsive value.\n * In other words, is it an object with viewport range keys?\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isResponsiveValue(value) {\n  return typeof value === 'object' && Object.keys(value).some(key => ['narrow', 'regular', 'wide'].includes(key));\n}\n\n/**\n * Resolves responsive values based on the current viewport width.\n * For example, if the current viewport width is narrow (less than 768px), the value of `{regular: 'foo', narrow: 'bar'}` will resolve to `'bar'`.\n *\n * @example\n * const value = useResponsiveValue({regular: 'foo', narrow: 'bar'})\n * console.log(value) // 'bar'\n */\n// TODO: Improve SRR support\nfunction useResponsiveValue(value, fallback) {\n  // Check viewport size\n  // TODO: What is the performance cost of creating media query listeners in this hook?\n  const isNarrowViewport = useMedia(viewportRanges.narrow, false);\n  const isRegularViewport = useMedia(viewportRanges.regular, false);\n  const isWideViewport = useMedia(viewportRanges.wide, false);\n  if (isResponsiveValue(value)) {\n    // If we've reached this line, we know that value is a responsive value\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const responsiveValue = value;\n    if (isNarrowViewport && 'narrow' in responsiveValue) {\n      return responsiveValue.narrow;\n    } else if (isWideViewport && 'wide' in responsiveValue) {\n      return responsiveValue.wide;\n    } else if (isRegularViewport && 'regular' in responsiveValue) {\n      return responsiveValue.regular;\n    } else {\n      return fallback;\n    }\n  } else {\n    // If we've reached this line, we know that value is not a responsive value\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return value;\n  }\n}\n\nexport { isResponsiveValue, useResponsiveValue, viewportRanges };\n"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,eAAe;;AAExC;;AAEA;AACA;AACA;AACA;AACA,MAAMC,cAAc,GAAG;EACrBC,MAAM,EAAE,mCAAmC;EAC3C;EACAC,OAAO,EAAE,oBAAoB;EAC7B;EACAC,IAAI,EAAE,qBAAqB,CAAC;AAC9B,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASC,iBAAiBA,CAACC,KAAK,EAAE;EAChC,OAAO,OAAOA,KAAK,KAAK,QAAQ,IAAIC,MAAM,CAACC,IAAI,CAACF,KAAK,CAAC,CAACG,IAAI,CAACC,GAAG,IAAI,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,CAACC,QAAQ,CAACD,GAAG,CAAC,CAAC;AACjH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASE,kBAAkBA,CAACN,KAAK,EAAEO,QAAQ,EAAE;EAC3C;EACA;EACA,MAAMC,gBAAgB,GAAGd,QAAQ,CAACC,cAAc,CAACC,MAAM,EAAE,KAAK,CAAC;EAC/D,MAAMa,iBAAiB,GAAGf,QAAQ,CAACC,cAAc,CAACE,OAAO,EAAE,KAAK,CAAC;EACjE,MAAMa,cAAc,GAAGhB,QAAQ,CAACC,cAAc,CAACG,IAAI,EAAE,KAAK,CAAC;EAC3D,IAAIC,iBAAiB,CAACC,KAAK,CAAC,EAAE;IAC5B;IACA;IACA,MAAMW,eAAe,GAAGX,KAAK;IAC7B,IAAIQ,gBAAgB,IAAI,QAAQ,IAAIG,eAAe,EAAE;MACnD,OAAOA,eAAe,CAACf,MAAM;IAC/B,CAAC,MAAM,IAAIc,cAAc,IAAI,MAAM,IAAIC,eAAe,EAAE;MACtD,OAAOA,eAAe,CAACb,IAAI;IAC7B,CAAC,MAAM,IAAIW,iBAAiB,IAAI,SAAS,IAAIE,eAAe,EAAE;MAC5D,OAAOA,eAAe,CAACd,OAAO;IAChC,CAAC,MAAM;MACL,OAAOU,QAAQ;IACjB;EACF,CAAC,MAAM;IACL;IACA;IACA,OAAOP,KAAK;EACd;AACF;AAEA,SAASD,iBAAiB,EAAEO,kBAAkB,EAAEX,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}