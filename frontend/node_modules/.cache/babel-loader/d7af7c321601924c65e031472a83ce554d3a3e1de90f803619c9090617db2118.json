{"ast":null,"code":"var _jsxFileName = \"/home/muneeb/assignment-krayo/frontend/src/components/LoginWithGoogle.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Loginwithgoogle = _ref => {\n  _s();\n  let {\n    isLoggedin,\n    setLoggedin\n  } = _ref;\n  const navigate = useNavigate();\n  const handleSuccess = credentialResponse => {\n    console.log(credentialResponse.credential);\n    const idToken = credentialResponse.credential;\n\n    // Send the ID token to the server to generate a JWT\n    fetch(\"/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        idToken\n      })\n    }).then(response => response.json()).then(data => {\n      // Store the JWT in local storage\n      localStorage.setItem(\"token\", credentialResponse.response);\n      setLoggedin(true);\n      navigate(\"/home\");\n    }).catch(error => {\n      console.error(\"Error:\", error);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleLogin, {\n    onSuccess: handleSuccess,\n    onError: () => {\n      console.log(\"Login Failed\");\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Loginwithgoogle, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = Loginwithgoogle;\nexport default Loginwithgoogle;\n\n// import React, { useState } from \"react\";\n// import { GoogleLogin } from \"@react-oauth/google\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const Loginwithgoogle = ({ isLoggedin, setLoggedin }) => {\n//   const navigate = useNavigate();\n//   // const [isLoggedin, setLoggedin] = useState(false);\n\n//   const handleSuccess = (credentialResponse) => {\n//     console.log(credentialResponse.credential);\n//     var decoded = jwt_decode(credentialResponse.credential);\n//     console.log(decoded);\n\n//     setLoggedin(true);\n//     navigate(\"/home\");\n//   };\n\n//   return (\n//     <GoogleLogin\n//       onSuccess={handleSuccess}\n//       onError={() => {\n//         console.log(\"Login Failed\");\n//       }}\n//     />\n//   );\n// };\n// export default Loginwithgoogle;\nvar _c;\n$RefreshReg$(_c, \"Loginwithgoogle\");","map":{"version":3,"names":["React","useState","GoogleLogin","useNavigate","jsxDEV","_jsxDEV","Loginwithgoogle","_ref","_s","isLoggedin","setLoggedin","navigate","handleSuccess","credentialResponse","console","log","credential","idToken","fetch","method","headers","body","JSON","stringify","then","response","json","data","localStorage","setItem","catch","error","onSuccess","onError","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/muneeb/assignment-krayo/frontend/src/components/LoginWithGoogle.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { GoogleLogin } from \"@react-oauth/google\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst Loginwithgoogle = ({ isLoggedin, setLoggedin }) => {\n  const navigate = useNavigate();\n\n  const handleSuccess = (credentialResponse) => {\n    console.log(credentialResponse.credential);\n\n    const idToken = credentialResponse.credential;\n\n    // Send the ID token to the server to generate a JWT\n    fetch(\"/login\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify({ idToken }),\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        // Store the JWT in local storage\n        localStorage.setItem(\"token\", credentialResponse.response);\n        setLoggedin(true);\n        navigate(\"/home\");\n      })\n      .catch((error) => {\n        console.error(\"Error:\", error);\n      });\n  };\n\n  return (\n    <GoogleLogin\n      onSuccess={handleSuccess}\n      onError={() => {\n        console.log(\"Login Failed\");\n      }}\n    />\n  );\n};\nexport default Loginwithgoogle;\n\n// import React, { useState } from \"react\";\n// import { GoogleLogin } from \"@react-oauth/google\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const Loginwithgoogle = ({ isLoggedin, setLoggedin }) => {\n//   const navigate = useNavigate();\n//   // const [isLoggedin, setLoggedin] = useState(false);\n\n//   const handleSuccess = (credentialResponse) => {\n//     console.log(credentialResponse.credential);\n//     var decoded = jwt_decode(credentialResponse.credential);\n//     console.log(decoded);\n\n//     setLoggedin(true);\n//     navigate(\"/home\");\n//   };\n\n//   return (\n//     <GoogleLogin\n//       onSuccess={handleSuccess}\n//       onError={() => {\n//         console.log(\"Login Failed\");\n//       }}\n//     />\n//   );\n// };\n// export default Loginwithgoogle;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,WAAW,QAAQ,kBAAkB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,eAAe,GAAGC,IAAA,IAAiC;EAAAC,EAAA;EAAA,IAAhC;IAAEC,UAAU;IAAEC;EAAY,CAAC,GAAAH,IAAA;EAClD,MAAMI,QAAQ,GAAGR,WAAW,EAAE;EAE9B,MAAMS,aAAa,GAAIC,kBAAkB,IAAK;IAC5CC,OAAO,CAACC,GAAG,CAACF,kBAAkB,CAACG,UAAU,CAAC;IAE1C,MAAMC,OAAO,GAAGJ,kBAAkB,CAACG,UAAU;;IAE7C;IACAE,KAAK,CAAC,QAAQ,EAAE;MACdC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEN;MAAQ,CAAC;IAClC,CAAC,CAAC,CACCO,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAK;MACd;MACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEhB,kBAAkB,CAACY,QAAQ,CAAC;MAC1Df,WAAW,CAAC,IAAI,CAAC;MACjBC,QAAQ,CAAC,OAAO,CAAC;IACnB,CAAC,CAAC,CACDmB,KAAK,CAAEC,KAAK,IAAK;MAChBjB,OAAO,CAACiB,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CAAC;EACN,CAAC;EAED,oBACE1B,OAAA,CAACH,WAAW;IACV8B,SAAS,EAAEpB,aAAc;IACzBqB,OAAO,EAAEA,CAAA,KAAM;MACbnB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;IAC7B;EAAE;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEN,CAAC;AAAC7B,EAAA,CApCIF,eAAe;EAAA,QACFH,WAAW;AAAA;AAAAmC,EAAA,GADxBhC,eAAe;AAqCrB,eAAeA,eAAe;;AAE9B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}