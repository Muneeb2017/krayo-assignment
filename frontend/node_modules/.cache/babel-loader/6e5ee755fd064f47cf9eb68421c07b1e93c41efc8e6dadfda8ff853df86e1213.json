{"ast":null,"code":"import Combobox from '@github/combobox-nav';\nimport { useRef, useState, useCallback, useEffect, useLayoutEffect } from 'react';\nimport { useId } from '../../hooks/useId.js';\n\n/**\n * Lightweight hook wrapper around the GitHub `Combobox` class from `@github/combobox-nav`.\n * With this hook, keyboard navigation through suggestions is automatically handled and\n * accessibility attributes are added.\n *\n * `useCombobox` will set nearly all necessary attributes by effect, but you **must** set\n * `role=\"option\"` on list items in order for them to be 'seen' by the combobox. Style the\n * currently highlighted option with the `[aria-selected=\"true\"]` selector.\n */\nconst useCombobox = _ref => {\n  let {\n    isOpen,\n    listElement: list,\n    inputElement: input,\n    onCommit: externalOnCommit,\n    options,\n    tabInsertsSuggestions = false,\n    defaultFirstOption = false\n  } = _ref;\n  const id = useId();\n  const optionIdPrefix = `combobox-${id}__option`;\n  const isOpenRef = useRef(isOpen);\n  const [comboboxInstance, setComboboxInstance] = useState(null);\n\n  /** Get all option element instances. */\n  const getOptionElements = useCallback(() => {\n    var _list$querySelectorAl;\n    return [...((_list$querySelectorAl = list === null || list === void 0 ? void 0 : list.querySelectorAll('[role=option]')) !== null && _list$querySelectorAl !== void 0 ? _list$querySelectorAl : [])];\n  }, [list]);\n  const onCommit = useCallback(e => {\n    const nativeEvent = e;\n    const indexAttr = nativeEvent.target.getAttribute('data-combobox-list-index');\n    const index = indexAttr !== null ? parseInt(indexAttr, 10) : NaN;\n    const option = options[index];\n    if (option) externalOnCommit({\n      nativeEvent,\n      option\n    });\n  }, [options, externalOnCommit]);\n\n  // Prevent focus leaving the input when clicking an item\n  const onOptionMouseDown = useCallback(e => e.preventDefault(), []);\n  useEffect(function initializeComboboxInstance() {\n    if (input && list) {\n      if (!list.getAttribute('role')) list.setAttribute('role', 'listbox');\n      const cb = new Combobox(input, list, {\n        tabInsertsSuggestions,\n        defaultFirstOption\n      });\n\n      // By using state instead of a ref here, we trigger the toggleKeyboardEventHandling\n      // effect. Otherwise we'd have to depend on isOpen in this effect to start the instance\n      // if it's initially open\n      setComboboxInstance(cb);\n      return () => {\n        cb.destroy();\n        setComboboxInstance(null);\n      };\n    }\n  }, [input, list, tabInsertsSuggestions, defaultFirstOption]);\n  useEffect(function toggleKeyboardEventHandling() {\n    const wasOpen = isOpenRef.current;\n\n    // It cannot be open if the instance hasn't yet been initialized\n    isOpenRef.current = isOpen && comboboxInstance !== null;\n    if (isOpen === wasOpen || !comboboxInstance) return;\n    if (isOpen) {\n      comboboxInstance.start();\n    } else {\n      comboboxInstance.stop();\n    }\n  }, [isOpen, comboboxInstance]);\n  useEffect(function bindCommitEvent() {\n    list === null || list === void 0 ? void 0 : list.addEventListener('combobox-commit', onCommit);\n    return () => list === null || list === void 0 ? void 0 : list.removeEventListener('combobox-commit', onCommit);\n  }, [onCommit, list]);\n  useLayoutEffect(() => {\n    const optionElements = getOptionElements();\n    // Ensure each option has a unique ID (required by the Combobox class), but respect user provided IDs\n    for (const [i, option] of optionElements.entries()) {\n      if (!option.id || option.id.startsWith(optionIdPrefix)) option.id = `${optionIdPrefix}-${i}`;\n      option.setAttribute('data-combobox-list-index', i.toString());\n      option.addEventListener('mousedown', onOptionMouseDown);\n      // the combobox class has a bug where it resets the default on navigate, but not on clearSelection\n      option.removeAttribute('data-combobox-option-default');\n    }\n    comboboxInstance === null || comboboxInstance === void 0 ? void 0 : comboboxInstance.clearSelection();\n    return () => {\n      for (const option of optionElements) option.removeEventListener('mousedown', onOptionMouseDown);\n    };\n  }, [getOptionElements, optionIdPrefix, options, comboboxInstance, onOptionMouseDown]);\n};\nexport { useCombobox };","map":{"version":3,"names":["Combobox","useRef","useState","useCallback","useEffect","useLayoutEffect","useId","useCombobox","_ref","isOpen","listElement","list","inputElement","input","onCommit","externalOnCommit","options","tabInsertsSuggestions","defaultFirstOption","id","optionIdPrefix","isOpenRef","comboboxInstance","setComboboxInstance","getOptionElements","_list$querySelectorAl","querySelectorAll","e","nativeEvent","indexAttr","target","getAttribute","index","parseInt","NaN","option","onOptionMouseDown","preventDefault","initializeComboboxInstance","setAttribute","cb","destroy","toggleKeyboardEventHandling","wasOpen","current","start","stop","bindCommitEvent","addEventListener","removeEventListener","optionElements","i","entries","startsWith","toString","removeAttribute","clearSelection"],"sources":["/home/muneeb/assignment-krayo/frontend/node_modules/@primer/react/lib-esm/drafts/hooks/useCombobox.js"],"sourcesContent":["import Combobox from '@github/combobox-nav';\nimport { useRef, useState, useCallback, useEffect, useLayoutEffect } from 'react';\nimport { useId } from '../../hooks/useId.js';\n\n/**\n * Lightweight hook wrapper around the GitHub `Combobox` class from `@github/combobox-nav`.\n * With this hook, keyboard navigation through suggestions is automatically handled and\n * accessibility attributes are added.\n *\n * `useCombobox` will set nearly all necessary attributes by effect, but you **must** set\n * `role=\"option\"` on list items in order for them to be 'seen' by the combobox. Style the\n * currently highlighted option with the `[aria-selected=\"true\"]` selector.\n */\nconst useCombobox = ({\n  isOpen,\n  listElement: list,\n  inputElement: input,\n  onCommit: externalOnCommit,\n  options,\n  tabInsertsSuggestions = false,\n  defaultFirstOption = false\n}) => {\n  const id = useId();\n  const optionIdPrefix = `combobox-${id}__option`;\n  const isOpenRef = useRef(isOpen);\n  const [comboboxInstance, setComboboxInstance] = useState(null);\n\n  /** Get all option element instances. */\n  const getOptionElements = useCallback(() => {\n    var _list$querySelectorAl;\n    return [...((_list$querySelectorAl = list === null || list === void 0 ? void 0 : list.querySelectorAll('[role=option]')) !== null && _list$querySelectorAl !== void 0 ? _list$querySelectorAl : [])];\n  }, [list]);\n  const onCommit = useCallback(e => {\n    const nativeEvent = e;\n    const indexAttr = nativeEvent.target.getAttribute('data-combobox-list-index');\n    const index = indexAttr !== null ? parseInt(indexAttr, 10) : NaN;\n    const option = options[index];\n    if (option) externalOnCommit({\n      nativeEvent,\n      option\n    });\n  }, [options, externalOnCommit]);\n\n  // Prevent focus leaving the input when clicking an item\n  const onOptionMouseDown = useCallback(e => e.preventDefault(), []);\n  useEffect(function initializeComboboxInstance() {\n    if (input && list) {\n      if (!list.getAttribute('role')) list.setAttribute('role', 'listbox');\n      const cb = new Combobox(input, list, {\n        tabInsertsSuggestions,\n        defaultFirstOption\n      });\n\n      // By using state instead of a ref here, we trigger the toggleKeyboardEventHandling\n      // effect. Otherwise we'd have to depend on isOpen in this effect to start the instance\n      // if it's initially open\n      setComboboxInstance(cb);\n      return () => {\n        cb.destroy();\n        setComboboxInstance(null);\n      };\n    }\n  }, [input, list, tabInsertsSuggestions, defaultFirstOption]);\n  useEffect(function toggleKeyboardEventHandling() {\n    const wasOpen = isOpenRef.current;\n\n    // It cannot be open if the instance hasn't yet been initialized\n    isOpenRef.current = isOpen && comboboxInstance !== null;\n    if (isOpen === wasOpen || !comboboxInstance) return;\n    if (isOpen) {\n      comboboxInstance.start();\n    } else {\n      comboboxInstance.stop();\n    }\n  }, [isOpen, comboboxInstance]);\n  useEffect(function bindCommitEvent() {\n    list === null || list === void 0 ? void 0 : list.addEventListener('combobox-commit', onCommit);\n    return () => list === null || list === void 0 ? void 0 : list.removeEventListener('combobox-commit', onCommit);\n  }, [onCommit, list]);\n  useLayoutEffect(() => {\n    const optionElements = getOptionElements();\n    // Ensure each option has a unique ID (required by the Combobox class), but respect user provided IDs\n    for (const [i, option] of optionElements.entries()) {\n      if (!option.id || option.id.startsWith(optionIdPrefix)) option.id = `${optionIdPrefix}-${i}`;\n      option.setAttribute('data-combobox-list-index', i.toString());\n      option.addEventListener('mousedown', onOptionMouseDown);\n      // the combobox class has a bug where it resets the default on navigate, but not on clearSelection\n      option.removeAttribute('data-combobox-option-default');\n    }\n    comboboxInstance === null || comboboxInstance === void 0 ? void 0 : comboboxInstance.clearSelection();\n    return () => {\n      for (const option of optionElements) option.removeEventListener('mousedown', onOptionMouseDown);\n    };\n  }, [getOptionElements, optionIdPrefix, options, comboboxInstance, onOptionMouseDown]);\n};\n\nexport { useCombobox };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}